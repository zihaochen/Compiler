/* The following code was generated by JFlex 1.5.0-SNAPSHOT */

package compiler.syntactic;

import java_cup.runtime.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.5.0-SNAPSHOT
 * from the specification file <tt>Lexer.flex</tt>
 */
class Yylex implements java_cup.runtime.Scanner, sym {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_STAGE = 2;
  public static final int CHAR_STAGE = 4;
  public static final int MULTICOMMENT = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\1\1\0\1\3\1\2\16\7\4\0\1\70\1\63"+
    "\1\65\1\15\1\5\1\61\1\54\1\66\1\41\1\42\1\16\1\57"+
    "\1\44\1\60\1\64\1\4\1\11\7\12\2\10\1\0\1\43\1\55"+
    "\1\45\1\56\2\0\6\14\21\5\1\13\2\5\1\50\1\67\1\51"+
    "\1\53\1\5\1\0\1\24\1\36\1\22\1\21\1\33\1\32\1\5"+
    "\1\23\1\20\1\5\1\37\1\34\1\5\1\26\1\17\2\5\1\25"+
    "\1\30\1\27\1\31\1\6\1\35\1\71\1\5\1\40\1\46\1\52"+
    "\1\47\1\62\41\7\2\0\4\5\4\0\1\5\2\0\1\7\7\0"+
    "\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0\u01ca\5\4\0"+
    "\14\5\16\0\5\5\7\0\1\5\1\0\1\5\21\0\160\7\5\5"+
    "\1\0\2\5\2\0\4\5\10\0\1\5\1\0\3\5\1\0\1\5"+
    "\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\7\2\0\236\5"+
    "\11\0\46\5\2\0\1\5\7\0\47\5\7\0\1\5\1\0\55\7"+
    "\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\5"+
    "\5\0\3\5\15\0\5\7\6\0\1\5\4\0\13\7\5\0\53\5"+
    "\37\7\4\0\2\5\1\7\143\5\1\0\1\5\10\7\1\0\6\7"+
    "\2\5\2\7\1\0\4\7\2\5\12\7\3\5\2\0\1\5\17\0"+
    "\1\7\1\5\1\7\36\5\33\7\2\0\131\5\13\7\1\5\16\0"+
    "\12\7\41\5\11\7\2\5\4\0\1\5\5\0\26\5\4\7\1\5"+
    "\11\7\1\5\3\7\1\5\5\7\22\0\31\5\3\7\104\0\1\5"+
    "\1\0\13\5\67\0\33\7\1\0\4\7\66\5\3\7\1\5\22\7"+
    "\1\5\7\7\12\5\2\7\2\0\12\7\1\0\7\5\1\0\7\5"+
    "\1\0\3\7\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\1\5\3\0\4\5\2\0\1\7\1\5\7\7\2\0\2\7"+
    "\2\0\3\7\1\5\10\0\1\7\4\0\2\5\1\0\3\5\2\7"+
    "\2\0\12\7\4\5\7\0\1\5\5\0\3\7\1\0\6\5\4\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0"+
    "\2\5\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0"+
    "\1\7\7\0\4\5\1\0\1\5\7\0\14\7\3\5\1\7\13\0"+
    "\3\7\1\0\11\5\1\0\3\5\1\0\26\5\1\0\7\5\1\0"+
    "\2\5\1\0\5\5\2\0\1\7\1\5\10\7\1\0\3\7\1\0"+
    "\3\7\2\0\1\5\17\0\2\5\2\7\2\0\12\7\1\0\1\5"+
    "\17\0\3\7\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\5\5\2\0\1\7\1\5\7\7\2\0\2\7"+
    "\2\0\3\7\10\0\2\7\4\0\2\5\1\0\3\5\2\7\2\0"+
    "\12\7\1\0\1\5\20\0\1\7\1\5\1\0\6\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5"+
    "\3\0\3\5\3\0\14\5\4\0\5\7\3\0\3\7\1\0\4\7"+
    "\2\0\1\5\6\0\1\7\16\0\12\7\11\0\1\5\7\0\3\7"+
    "\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5"+
    "\3\0\1\5\7\7\1\0\3\7\1\0\4\7\7\0\2\7\1\0"+
    "\2\5\6\0\2\5\2\7\2\0\12\7\22\0\2\7\1\0\10\5"+
    "\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5\2\0\1\7"+
    "\1\5\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0\1\5"+
    "\1\0\2\5\2\7\2\0\12\7\1\0\2\5\17\0\2\7\1\0"+
    "\10\5\1\0\3\5\1\0\51\5\2\0\1\5\7\7\1\0\3\7"+
    "\1\0\4\7\1\5\10\0\1\7\10\0\2\5\2\7\2\0\12\7"+
    "\12\0\6\5\2\0\2\7\1\0\22\5\3\0\30\5\1\0\11\5"+
    "\1\0\1\5\2\0\7\5\3\0\1\7\4\0\6\7\1\0\1\7"+
    "\1\0\10\7\22\0\2\7\15\0\60\5\1\7\2\5\7\7\4\0"+
    "\10\5\10\7\1\0\12\7\47\0\2\5\1\0\1\5\2\0\2\5"+
    "\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3\5"+
    "\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\7\2\5"+
    "\6\7\1\0\2\7\1\5\2\0\5\5\1\0\1\5\1\0\6\7"+
    "\2\0\12\7\2\0\4\5\40\0\1\5\27\0\2\7\6\0\12\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\5\1\0"+
    "\44\5\4\0\24\7\1\0\2\7\5\5\13\7\1\0\44\7\11\0"+
    "\1\7\71\0\53\5\24\7\1\5\12\7\6\0\6\5\4\7\4\5"+
    "\3\7\1\5\3\7\2\5\7\7\3\5\4\7\15\5\14\7\1\5"+
    "\17\7\2\0\46\5\1\0\1\5\5\0\1\5\2\0\53\5\1\0"+
    "\u014d\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0"+
    "\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5\1\0"+
    "\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5\2\0"+
    "\103\5\2\0\3\7\40\0\20\5\20\0\125\5\14\0\u026c\5\2\0"+
    "\21\5\1\0\32\5\5\0\113\5\3\0\3\5\17\0\15\5\1\0"+
    "\4\5\3\7\13\0\22\5\3\7\13\0\22\5\2\7\14\0\15\5"+
    "\1\0\3\5\1\0\2\7\14\0\64\5\40\7\3\0\1\5\3\0"+
    "\2\5\1\7\2\0\12\7\41\0\3\7\2\0\12\7\6\0\130\5"+
    "\10\0\51\5\1\7\1\5\5\0\106\5\12\0\35\5\3\0\14\7"+
    "\4\0\14\7\12\0\12\7\36\5\2\0\5\5\13\0\54\5\4\0"+
    "\21\7\7\5\2\7\6\0\12\7\46\0\27\5\5\7\4\0\65\5"+
    "\12\7\1\0\35\7\2\0\13\7\6\0\12\7\15\0\1\5\130\0"+
    "\5\7\57\5\21\7\7\5\4\0\12\7\21\0\11\7\14\0\3\7"+
    "\36\5\15\7\2\5\12\7\54\5\16\7\14\0\44\5\24\7\10\0"+
    "\12\7\3\0\3\5\12\7\44\5\122\0\3\7\1\0\25\7\4\5"+
    "\1\7\4\5\3\7\2\5\11\0\300\5\47\7\25\0\4\7\u0116\5"+
    "\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5\1\0\1\5"+
    "\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5\1\0\7\5"+
    "\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5"+
    "\4\0\15\5\5\0\3\5\1\0\7\5\16\0\5\7\32\0\5\7"+
    "\20\0\2\5\23\0\1\5\13\0\5\7\5\0\6\7\1\0\1\5"+
    "\15\0\1\5\20\0\15\5\3\0\33\5\25\0\15\7\4\0\1\7"+
    "\3\0\14\7\21\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5"+
    "\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5"+
    "\1\0\13\5\2\0\4\5\5\0\5\5\4\0\1\5\21\0\51\5"+
    "\u0a77\0\57\5\1\0\57\5\1\0\205\5\6\0\4\5\3\7\2\5"+
    "\14\0\46\5\1\0\1\5\5\0\1\5\2\0\70\5\7\0\1\5"+
    "\17\0\1\7\27\5\11\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0"+
    "\40\7\57\0\1\5\u01d5\0\3\5\31\0\11\5\6\7\1\0\5\5"+
    "\2\0\5\5\4\0\126\5\2\0\2\7\2\0\3\5\1\0\132\5"+
    "\1\0\4\5\5\0\51\5\3\0\136\5\21\0\33\5\65\0\20\5"+
    "\u0200\0\u19b6\5\112\0\u51cd\5\63\0\u048d\5\103\0\56\5\2\0\u010d\5"+
    "\3\0\20\5\12\7\2\5\24\0\57\5\1\7\4\0\12\7\1\0"+
    "\31\5\7\0\1\7\120\5\2\7\45\0\11\5\2\0\147\5\2\0"+
    "\4\5\1\0\4\5\14\0\13\5\115\0\12\5\1\7\3\5\1\7"+
    "\4\5\1\7\27\5\5\7\20\0\1\5\7\0\64\5\14\0\2\7"+
    "\62\5\21\7\13\0\12\7\6\0\22\7\6\5\3\0\1\5\4\0"+
    "\12\7\34\5\10\7\2\0\27\5\15\7\14\0\35\5\3\0\4\7"+
    "\57\5\16\7\16\0\1\5\12\7\46\0\51\5\16\7\11\0\3\5"+
    "\1\7\10\5\2\7\2\0\12\7\6\0\27\5\3\0\1\5\1\7"+
    "\4\0\60\5\1\7\1\5\3\7\2\5\2\7\5\5\2\7\1\5"+
    "\1\7\1\5\30\0\3\5\2\0\13\5\5\7\2\0\3\5\2\7"+
    "\12\0\6\5\2\0\6\5\2\0\6\5\11\0\7\5\1\0\7\5"+
    "\221\0\43\5\10\7\1\0\2\7\2\0\12\7\6\0\u2ba4\5\14\0"+
    "\27\5\4\0\61\5\u2104\0\u016e\5\2\0\152\5\46\0\7\5\14\0"+
    "\5\5\5\0\1\5\1\7\12\5\1\0\15\5\1\0\5\5\1\0"+
    "\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0"+
    "\100\5\2\0\66\5\50\0\15\5\3\0\20\7\20\0\7\7\14\0"+
    "\2\5\30\0\3\5\31\0\1\5\6\0\5\5\1\0\207\5\2\0"+
    "\1\7\4\0\1\5\13\0\12\7\7\0\32\5\4\0\1\5\1\0"+
    "\32\5\13\0\131\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0"+
    "\3\5\3\0\2\5\3\0\2\5\22\0\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\2\4\2\5\1\2\1\6"+
    "\11\4\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\1\36\3\1\2\37\1\0\1\40\1\41\1\4\1\42"+
    "\1\0\1\43\1\4\1\44\12\4\1\45\1\46\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\0"+
    "\1\77\12\0\1\100\1\4\1\101\1\102\6\4\1\103"+
    "\3\4\1\104\1\105\1\66\1\106\1\0\1\107\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\117\1\0"+
    "\1\120\1\4\1\121\4\4\1\122\2\4\1\66\1\106"+
    "\2\0\1\123\4\4\1\124\1\125\1\126\1\4\1\127"+
    "\1\130\1\131\1\4\1\132";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\72\0\164\0\256\0\350\0\350\0\u0122\0\u015c"+
    "\0\u0196\0\u01d0\0\u020a\0\u0244\0\u027e\0\u02b8\0\u02f2\0\u032c"+
    "\0\u0366\0\u03a0\0\u03da\0\u0414\0\u044e\0\u0488\0\u04c2\0\350"+
    "\0\350\0\350\0\350\0\u04fc\0\350\0\350\0\350\0\350"+
    "\0\u0536\0\u0570\0\u05aa\0\u05e4\0\u061e\0\u0658\0\u0692\0\u06cc"+
    "\0\350\0\u0706\0\350\0\350\0\350\0\u0740\0\350\0\u077a"+
    "\0\u07b4\0\u07ee\0\350\0\u0828\0\u0862\0\350\0\350\0\u089c"+
    "\0\u08d6\0\u0910\0\350\0\u094a\0\u0196\0\u0984\0\u09be\0\u09f8"+
    "\0\u0a32\0\u0a6c\0\u0aa6\0\u0ae0\0\u0b1a\0\u0b54\0\u0b8e\0\350"+
    "\0\350\0\350\0\350\0\350\0\350\0\350\0\u0bc8\0\350"+
    "\0\u0c02\0\350\0\350\0\350\0\350\0\350\0\350\0\350"+
    "\0\u0c3c\0\350\0\350\0\350\0\350\0\350\0\350\0\350"+
    "\0\350\0\u0c76\0\350\0\u0cb0\0\u0cea\0\u0d24\0\u0d5e\0\u0d98"+
    "\0\u0dd2\0\u0e0c\0\u0e46\0\u0e80\0\u0eba\0\350\0\u0ef4\0\u0910"+
    "\0\u0196\0\u0f2e\0\u0f68\0\u0fa2\0\u0fdc\0\u1016\0\u1050\0\u0196"+
    "\0\u108a\0\u10c4\0\u10fe\0\350\0\350\0\u1138\0\u1172\0\u11ac"+
    "\0\350\0\350\0\350\0\350\0\350\0\350\0\350\0\350"+
    "\0\350\0\u11e6\0\u0196\0\u1220\0\u0196\0\u125a\0\u1294\0\u12ce"+
    "\0\u1308\0\u0196\0\u1342\0\u137c\0\350\0\350\0\u13b6\0\u13f0"+
    "\0\350\0\u142a\0\u1464\0\u149e\0\u14d8\0\u0196\0\u0196\0\u0196"+
    "\0\u1512\0\u0196\0\u0196\0\u0196\0\u154c\0\u0196";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\6\1\10\1\11\1\12\1\5"+
    "\1\13\1\14\1\13\2\11\1\15\1\16\1\11\1\17"+
    "\1\11\1\20\2\11\1\21\2\11\1\22\1\23\1\24"+
    "\1\25\1\11\1\26\1\27\2\11\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\5\1\6\1\11\1\56\2\5"+
    "\62\56\1\57\1\56\1\60\2\56\1\61\2\5\63\61"+
    "\1\5\1\62\2\61\16\63\1\64\53\63\73\0\1\6"+
    "\74\0\1\65\11\0\1\66\26\0\1\67\31\0\10\11"+
    "\2\0\22\11\30\0\1\11\5\0\10\11\2\0\1\70"+
    "\21\11\30\0\1\11\10\0\3\13\70\0\2\71\1\72"+
    "\55\0\1\72\1\15\2\0\67\15\45\0\1\73\31\0"+
    "\10\11\2\0\7\11\1\74\3\11\1\75\6\11\30\0"+
    "\1\11\5\0\10\11\2\0\1\76\3\11\1\77\15\11"+
    "\30\0\1\11\5\0\10\11\2\0\14\11\1\100\5\11"+
    "\30\0\1\11\5\0\10\11\2\0\1\11\1\101\6\11"+
    "\1\102\11\11\30\0\1\11\5\0\10\11\2\0\7\11"+
    "\1\103\12\11\30\0\1\11\5\0\10\11\2\0\1\104"+
    "\21\11\30\0\1\11\5\0\10\11\2\0\15\11\1\105"+
    "\4\11\30\0\1\11\5\0\10\11\2\0\4\11\1\106"+
    "\15\11\30\0\1\11\5\0\10\11\2\0\6\11\1\107"+
    "\13\11\30\0\1\11\45\0\1\110\71\0\1\111\4\0"+
    "\1\112\64\0\1\113\71\0\1\114\6\0\1\115\62\0"+
    "\1\116\7\0\1\117\61\0\1\120\10\0\1\121\60\0"+
    "\1\122\11\0\1\123\57\0\1\124\10\0\1\125\1\0"+
    "\1\126\56\0\1\127\71\0\1\130\24\0\1\56\2\0"+
    "\62\56\1\0\1\56\1\0\2\56\11\0\2\131\12\0"+
    "\1\132\1\133\1\134\2\0\1\135\3\0\1\136\26\0"+
    "\1\137\1\140\1\0\1\141\1\142\66\0\1\143\14\0"+
    "\2\144\12\0\1\145\1\146\1\147\2\0\1\150\3\0"+
    "\1\151\26\0\1\152\1\153\1\154\1\0\1\155\4\0"+
    "\1\156\65\0\1\65\1\6\1\7\67\65\5\0\10\11"+
    "\2\0\1\11\1\157\20\11\30\0\1\11\11\0\2\71"+
    "\67\0\3\160\1\0\1\160\4\0\2\160\1\0\1\160"+
    "\5\0\2\160\2\0\1\160\40\0\10\11\2\0\10\11"+
    "\1\161\11\11\30\0\1\11\5\0\10\11\2\0\7\11"+
    "\1\162\12\11\30\0\1\11\5\0\10\11\2\0\5\11"+
    "\1\163\14\11\30\0\1\11\5\0\10\11\2\0\10\11"+
    "\1\164\11\11\30\0\1\11\5\0\10\11\2\0\21\11"+
    "\1\165\30\0\1\11\5\0\10\11\2\0\6\11\1\166"+
    "\13\11\30\0\1\11\5\0\10\11\2\0\1\11\1\167"+
    "\20\11\30\0\1\11\5\0\10\11\2\0\6\11\1\170"+
    "\13\11\30\0\1\11\5\0\10\11\2\0\11\11\1\171"+
    "\10\11\30\0\1\11\5\0\10\11\2\0\1\11\1\172"+
    "\20\11\30\0\1\11\5\0\10\11\2\0\14\11\1\173"+
    "\5\11\30\0\1\11\45\0\1\174\71\0\1\175\35\0"+
    "\2\176\67\0\3\177\1\0\1\177\4\0\2\177\1\0"+
    "\1\177\5\0\2\177\2\0\1\177\44\0\2\200\53\0"+
    "\1\201\71\0\1\202\71\0\1\203\71\0\1\204\71\0"+
    "\1\205\71\0\1\206\71\0\1\207\71\0\1\210\71\0"+
    "\1\211\13\0\3\212\1\0\1\212\4\0\2\212\1\0"+
    "\1\212\5\0\2\212\2\0\1\212\40\0\10\11\2\0"+
    "\2\11\1\213\17\11\30\0\1\11\5\0\10\11\2\0"+
    "\10\11\1\214\11\11\30\0\1\11\5\0\10\11\2\0"+
    "\6\11\1\215\13\11\30\0\1\11\5\0\10\11\2\0"+
    "\12\11\1\216\7\11\30\0\1\11\5\0\10\11\2\0"+
    "\14\11\1\217\5\11\30\0\1\11\5\0\10\11\2\0"+
    "\12\11\1\220\7\11\30\0\1\11\5\0\10\11\2\0"+
    "\1\221\21\11\30\0\1\11\5\0\10\11\2\0\14\11"+
    "\1\222\5\11\30\0\1\11\5\0\10\11\2\0\15\11"+
    "\1\223\4\11\30\0\1\11\5\0\10\11\2\0\5\11"+
    "\1\224\14\11\30\0\1\11\11\0\2\225\67\0\3\226"+
    "\1\0\1\226\4\0\2\226\1\0\1\226\5\0\2\226"+
    "\2\0\1\226\44\0\2\227\53\0\1\201\13\0\3\230"+
    "\1\0\1\230\4\0\2\230\1\0\1\230\5\0\2\230"+
    "\2\0\1\230\27\0\1\231\10\0\10\11\2\0\1\11"+
    "\1\232\20\11\30\0\1\11\5\0\10\11\2\0\6\11"+
    "\1\233\13\11\30\0\1\11\5\0\10\11\2\0\1\234"+
    "\21\11\30\0\1\11\5\0\10\11\2\0\3\11\1\235"+
    "\16\11\30\0\1\11\5\0\10\11\2\0\7\11\1\236"+
    "\12\11\30\0\1\11\5\0\10\11\2\0\14\11\1\237"+
    "\5\11\30\0\1\11\5\0\10\11\2\0\20\11\1\240"+
    "\1\11\30\0\1\11\66\0\1\201\71\0\1\231\10\0"+
    "\10\11\2\0\7\11\1\241\12\11\30\0\1\11\5\0"+
    "\10\11\2\0\7\11\1\242\12\11\30\0\1\11\5\0"+
    "\10\11\2\0\13\11\1\243\6\11\30\0\1\11\5\0"+
    "\10\11\2\0\10\11\1\244\11\11\30\0\1\11\5\0"+
    "\10\11\2\0\12\11\1\245\7\11\30\0\1\11\5\0"+
    "\10\11\2\0\14\11\1\246\5\11\30\0\1\11";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5510];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\2\11\21\1\4\11\1\1\4\11\10\1\1\11"+
    "\1\1\3\11\1\1\1\11\3\1\1\11\1\1\1\0"+
    "\2\11\2\1\1\0\1\11\14\1\7\11\1\1\1\11"+
    "\1\1\7\11\1\1\10\11\1\0\1\11\12\0\1\11"+
    "\15\1\2\11\2\1\1\0\11\11\1\0\12\1\2\11"+
    "\2\0\1\11\15\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int CommentCount = 0;

    StringBuffer string = new StringBuffer();

    private void err(String message) throws RuntimeException {
        throw new RuntimeException(message + "Scanning error in the line" + yyline + ",column" + yycolumn + ": ");
    }

    private Symbol tok (int type){
     //   System.out.println("Token found: " + type);
        return new Symbol(type, yyline, yycolumn);
    }

    private Symbol tok (int type, Object value){
    //    System.out.println("Token found: " + type + " <" + value + "> ");
        return new Symbol(type, yyline, yycolumn, value);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Yylex(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Yylex(java.io.InputStream in) {
    this(new java.io.InputStreamReader
             (in, java.nio.charset.Charset.forName("UTF-8")));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2256) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

    // numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { err("Illegal character" + yytext());
          }
        case 91: break;
        case 2: 
          { /* skip */
          }
        case 92: break;
        case 3: 
          { return tok(DIV);
          }
        case 93: break;
        case 4: 
          { return tok(IDENTIFIER, yytext());
          }
        case 94: break;
        case 5: 
          { return tok(INTEGER, Integer.valueOf(yytext(), 10));
          }
        case 95: break;
        case 6: 
          { return tok(MULTI);
          }
        case 96: break;
        case 7: 
          { return tok(LPAREN);
          }
        case 97: break;
        case 8: 
          { return tok(RPAREN);
          }
        case 98: break;
        case 9: 
          { return tok(SEMICOLON);
          }
        case 99: break;
        case 10: 
          { return tok(COMMA);
          }
        case 100: break;
        case 11: 
          { return tok(ASSIGN);
          }
        case 101: break;
        case 12: 
          { return tok(LBRACE);
          }
        case 102: break;
        case 13: 
          { return tok(RBRACE);
          }
        case 103: break;
        case 14: 
          { return tok(LBRACKET);
          }
        case 104: break;
        case 15: 
          { return tok(RBRACKET);
          }
        case 105: break;
        case 16: 
          { return tok(VBAR);
          }
        case 106: break;
        case 17: 
          { return tok(CARET);
          }
        case 107: break;
        case 18: 
          { return tok(AMPERS);
          }
        case 108: break;
        case 19: 
          { return tok(LT);
          }
        case 109: break;
        case 20: 
          { return tok(GT);
          }
        case 110: break;
        case 21: 
          { return tok(PLUS);
          }
        case 111: break;
        case 22: 
          { return tok(MINUS);
          }
        case 112: break;
        case 23: 
          { return tok(MOD);
          }
        case 113: break;
        case 24: 
          { return tok(TILDE);
          }
        case 114: break;
        case 25: 
          { return tok(EXCLAM);
          }
        case 115: break;
        case 26: 
          { return tok(DOT);
          }
        case 116: break;
        case 27: 
          { string.setLength(0); yybegin(STRING_STAGE);
          }
        case 117: break;
        case 28: 
          { string.setLength(0); yybegin(CHAR_STAGE);
          }
        case 118: break;
        case 29: 
          { string.append(yytext());
          }
        case 119: break;
        case 30: 
          { yybegin(YYINITIAL);
                              return tok(STRING_LITERAL, string.toString());
          }
        case 120: break;
        case 31: 
          { 
          }
        case 121: break;
        case 32: 
          { CommentCount = 1; yybegin(MULTICOMMENT);
          }
        case 122: break;
        case 33: 
          { return tok(DIV_ASSIGN);
          }
        case 123: break;
        case 34: 
          { return tok(INTEGER, Integer.valueOf(yytext(), 8));
          }
        case 124: break;
        case 35: 
          { return tok(MUL_ASSIGN);
          }
        case 125: break;
        case 36: 
          { return tok(IF);
          }
        case 126: break;
        case 37: 
          { return tok(EQ);
          }
        case 127: break;
        case 38: 
          { return tok(OR_ASSIGN);
          }
        case 128: break;
        case 39: 
          { return tok(OR);
          }
        case 129: break;
        case 40: 
          { return tok(XOR_ASSIGN);
          }
        case 130: break;
        case 41: 
          { return tok(AND_ASSIGN);
          }
        case 131: break;
        case 42: 
          { return tok(AND);
          }
        case 132: break;
        case 43: 
          { return tok(LE);
          }
        case 133: break;
        case 44: 
          { return tok(SHL);
          }
        case 134: break;
        case 45: 
          { return tok(GE);
          }
        case 135: break;
        case 46: 
          { return tok(SHR);
          }
        case 136: break;
        case 47: 
          { return tok(PLUS_ASSIGN);
          }
        case 137: break;
        case 48: 
          { return tok(INC);
          }
        case 138: break;
        case 49: 
          { return tok(SUB_ASSIGN);
          }
        case 139: break;
        case 50: 
          { return tok(PTR);
          }
        case 140: break;
        case 51: 
          { return tok(DEC);
          }
        case 141: break;
        case 52: 
          { return tok(MOD_ASSIGN);
          }
        case 142: break;
        case 53: 
          { return tok(NE);
          }
        case 143: break;
        case 54: 
          { string.append((char) Integer.valueOf(yytext().substring(1, yytext().length()), 8).intValue());
          }
        case 144: break;
        case 55: 
          { string.append('\r');
          }
        case 145: break;
        case 56: 
          { string.append ('\n');
          }
        case 146: break;
        case 57: 
          { string.append('\t');
          }
        case 147: break;
        case 58: 
          { string.append('\f');
          }
        case 148: break;
        case 59: 
          { string.append('\b');
          }
        case 149: break;
        case 60: 
          { string.append('\"');
          }
        case 150: break;
        case 61: 
          { string.append('\'');
          }
        case 151: break;
        case 62: 
          { string.append('\\');
          }
        case 152: break;
        case 63: 
          { yybegin(YYINITIAL);
                              return tok(CHAR_LITERAL,yytext().charAt(0));
          }
        case 153: break;
        case 64: 
          { CommentCount--;
                      if (CommentCount == 0) yybegin(YYINITIAL);
          }
        case 154: break;
        case 65: 
          { return tok(INTEGER, Integer.valueOf(yytext().substring(2), 16));
          }
        case 155: break;
        case 66: 
          { return tok(INT);
          }
        case 156: break;
        case 67: 
          { return tok(FOR);
          }
        case 157: break;
        case 68: 
          { return tok(SHL_ASSIGN);
          }
        case 158: break;
        case 69: 
          { return tok(SHR_ASSIGN);
          }
        case 159: break;
        case 70: 
          { string.append((char) Integer.valueOf(yytext().substring(2, yytext().length()), 16).intValue());
          }
        case 160: break;
        case 71: 
          { yybegin(YYINITIAL);
                              return tok(CHAR_LITERAL, (char) Integer.valueOf(yytext().substring(1, yytext().length() - 1), 8).intValue());
          }
        case 161: break;
        case 72: 
          { yybegin(YYINITIAL);
                              return tok(CHAR_LITERAL, '\r');
          }
        case 162: break;
        case 73: 
          { yybegin(YYINITIAL);
                              return tok(CHAR_LITERAL, '\n');
          }
        case 163: break;
        case 74: 
          { yybegin(YYINITIAL);
                              return tok(CHAR_LITERAL, '\t');
          }
        case 164: break;
        case 75: 
          { yybegin(YYINITIAL);
                              return tok(CHAR_LITERAL, '\f');
          }
        case 165: break;
        case 76: 
          { yybegin(YYINITIAL);
                              return tok(CHAR_LITERAL, '\b');
          }
        case 166: break;
        case 77: 
          { yybegin(YYINITIAL);
                              return tok(CHAR_LITERAL, '\"');
          }
        case 167: break;
        case 78: 
          { yybegin(YYINITIAL);
                              return tok(CHAR_LITERAL, '\'');
          }
        case 168: break;
        case 79: 
          { yybegin(YYINITIAL);
                              return tok(CHAR_LITERAL, '\\');
          }
        case 169: break;
        case 80: 
          { return tok(VOID);
          }
        case 170: break;
        case 81: 
          { return tok(CHAR);
          }
        case 171: break;
        case 82: 
          { return tok(ELSE);
          }
        case 172: break;
        case 83: 
          { yybegin(YYINITIAL);
                              return tok(CHAR_LITERAL, (char) Integer.valueOf(yytext().substring(2, yytext().length() - 1), 16).intValue());
          }
        case 173: break;
        case 84: 
          { return tok(UNION);
          }
        case 174: break;
        case 85: 
          { return tok(WHILE);
          }
        case 175: break;
        case 86: 
          { return tok(BREAK);
          }
        case 176: break;
        case 87: 
          { return tok(RETURN);
          }
        case 177: break;
        case 88: 
          { return tok(SIZEOF);
          }
        case 178: break;
        case 89: 
          { return tok(STRUCT);
          }
        case 179: break;
        case 90: 
          { return tok(CONTINUE);
          }
        case 180: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {     if (yystate() ==  MULTICOMMENT)
        err("Comment symbol do not match (EOF)!");
    return tok(EOF, null);
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
