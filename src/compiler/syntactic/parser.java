
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Apr 17 12:31:42 CST 2015
//----------------------------------------------------

package compiler.syntactic;

import java.io.InputStream;
import compiler.ast.nodes.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Apr 17 12:31:42 CST 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\212\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\002\003\000\002\003\005" +
    "\000\002\003\004\000\002\004\003\000\002\004\004\000" +
    "\002\005\005\000\002\006\003\000\002\006\005\000\002" +
    "\007\003\000\002\007\005\000\002\010\003\000\002\010" +
    "\005\000\002\011\005\000\002\011\003\000\002\012\003" +
    "\000\002\012\005\000\002\013\003\000\002\013\005\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\004\000\002\014\004\000\002\014\006\000\002\014" +
    "\006\000\002\014\007\000\002\014\007\000\002\015\005" +
    "\000\002\015\006\000\002\016\004\000\002\017\003\000" +
    "\002\017\004\000\002\020\003\000\002\020\006\000\002" +
    "\020\005\000\002\020\006\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\022\003\000\002\022\004\000\002\023\004\000" +
    "\002\023\003\000\002\024\006\000\002\025\007\000\002" +
    "\025\011\000\002\026\007\000\002\026\013\000\002\026" +
    "\012\000\002\027\004\000\002\027\004\000\002\027\005" +
    "\000\002\030\003\000\002\030\005\000\002\031\003\000" +
    "\002\031\005\000\002\032\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\032\003\000\002\032" +
    "\003\000\002\032\003\000\002\032\003\000\002\032\003" +
    "\000\002\032\003\000\002\032\003\000\002\033\003\000" +
    "\002\034\003\000\002\034\005\000\002\035\003\000\002" +
    "\035\005\000\002\036\003\000\002\036\005\000\002\037" +
    "\003\000\002\037\005\000\002\040\003\000\002\040\005" +
    "\000\002\041\003\000\002\041\005\000\002\042\003\000" +
    "\002\042\003\000\002\043\003\000\002\043\005\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\045\003\000\002\045\005\000\002\046\003" +
    "\000\002\046\003\000\002\047\003\000\002\047\005\000" +
    "\002\050\003\000\002\050\003\000\002\051\003\000\002" +
    "\051\005\000\002\052\003\000\002\052\003\000\002\052" +
    "\003\000\002\053\003\000\002\053\006\000\002\054\003" +
    "\000\002\054\004\000\002\055\003\000\002\055\004\000" +
    "\002\055\004\000\002\055\004\000\002\055\004\000\002" +
    "\055\006\000\002\056\003\000\002\056\003\000\002\056" +
    "\003\000\002\056\003\000\002\056\003\000\002\056\003" +
    "\000\002\057\003\000\002\057\006\000\002\057\006\000" +
    "\002\057\005\000\002\057\005\000\002\057\005\000\002" +
    "\057\004\000\002\057\004\000\002\060\003\000\002\060" +
    "\005\000\002\061\003\000\002\061\003\000\002\061\003" +
    "\000\002\061\003\000\002\061\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\014\004\010\005\014\006\004\007\007\010" +
    "\005\001\002\000\012\022\uffe9\023\uffe9\042\uffe9\074\uffe9" +
    "\001\002\000\006\030\341\074\340\001\002\000\016\002" +
    "\ufffd\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\001\002" +
    "\000\006\030\321\074\320\001\002\000\012\022\uffeb\023" +
    "\uffeb\042\uffeb\074\uffeb\001\002\000\016\002\316\004\010" +
    "\005\014\006\004\007\007\010\005\001\002\000\016\002" +
    "\ufffe\004\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\001\002" +
    "\000\010\023\017\042\022\074\021\001\002\000\012\022" +
    "\uffea\023\uffea\042\uffea\074\uffea\001\002\000\006\023\313" +
    "\024\312\001\002\000\006\023\ufff3\024\ufff3\001\002\000" +
    "\072\002\ufffb\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\013\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\020" +
    "\ufffb\021\ufffb\023\ufffb\030\ufffb\034\ufffb\037\ufffb\040\ufffb" +
    "\042\ufffb\044\ufffb\045\ufffb\057\ufffb\060\ufffb\074\ufffb\075" +
    "\ufffb\076\ufffb\077\ufffb\001\002\000\012\023\ufff0\024\ufff0" +
    "\025\222\030\221\001\002\000\020\021\207\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\027\uffdd\030\uffdd\001\002\000\006" +
    "\042\022\074\021\001\002\000\016\022\uffdf\023\uffdf\024" +
    "\uffdf\025\uffdf\027\024\030\uffdf\001\002\000\036\020\030" +
    "\021\043\034\026\037\031\040\054\042\035\044\044\045" +
    "\051\057\047\060\052\074\037\075\045\076\057\077\053" +
    "\001\002\000\052\022\uffa3\023\uffa3\024\uffa3\027\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\036\uffa3\037\070" +
    "\040\071\047\uffa3\050\uffa3\051\uffa3\052\uffa3\053\uffa3\054" +
    "\uffa3\055\uffa3\056\uffa3\001\002\000\036\020\uff8c\021\uff8c" +
    "\034\uff8c\037\uff8c\040\uff8c\042\uff8c\044\uff8c\045\uff8c\057" +
    "\uff8c\060\uff8c\074\uff8c\075\uff8c\076\uff8c\077\uff8c\001\002" +
    "\000\042\022\uffad\023\uffad\024\uffad\027\uffad\031\uffad\032" +
    "\uffad\033\uffad\034\uffad\035\110\036\111\047\uffad\050\uffad" +
    "\051\uffad\052\uffad\053\112\054\113\001\002\000\036\020" +
    "\030\021\202\034\026\037\031\040\054\042\035\044\044" +
    "\045\051\057\047\060\052\074\037\075\045\076\057\077" +
    "\053\001\002\000\036\020\uff8a\021\uff8a\034\uff8a\037\uff8a" +
    "\040\uff8a\042\uff8a\044\uff8a\045\uff8a\057\uff8a\060\uff8a\074" +
    "\uff8a\075\uff8a\076\uff8a\077\uff8a\001\002\000\060\022\uff9b" +
    "\023\uff9b\024\uff9b\027\uff9b\031\uff9b\032\uff9b\033\uff9b\034" +
    "\uff9b\035\uff9b\036\uff9b\037\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\047\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b\054" +
    "\uff9b\055\uff9b\056\uff9b\001\002\000\036\020\030\021\043" +
    "\034\026\037\031\040\054\042\035\044\044\045\051\057" +
    "\047\060\052\074\037\075\045\076\057\077\053\001\002" +
    "\000\004\027\200\001\002\000\036\020\uff8b\021\uff8b\034" +
    "\uff8b\037\uff8b\040\uff8b\042\uff8b\044\uff8b\045\uff8b\057\uff8b" +
    "\060\uff8b\074\uff8b\075\uff8b\076\uff8b\077\uff8b\001\002\000" +
    "\060\022\uff9f\023\uff9f\024\uff9f\027\uff9f\031\uff9f\032\uff9f" +
    "\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f\041" +
    "\074\042\076\043\073\047\uff9f\050\uff9f\051\uff9f\052\uff9f" +
    "\053\uff9f\054\uff9f\055\uff9f\056\uff9f\001\002\000\122\021" +
    "\uff7c\022\uff7c\023\uff7c\024\uff7c\025\uff7c\026\uff7c\027\uff7c" +
    "\031\uff7c\032\uff7c\033\uff7c\034\uff7c\035\uff7c\036\uff7c\037" +
    "\uff7c\040\uff7c\041\uff7c\042\uff7c\043\uff7c\046\uff7c\047\uff7c" +
    "\050\uff7c\051\uff7c\052\uff7c\053\uff7c\054\uff7c\055\uff7c\056" +
    "\uff7c\057\uff7c\060\uff7c\061\uff7c\062\uff7c\063\uff7c\064\uff7c" +
    "\065\uff7c\066\uff7c\067\uff7c\070\uff7c\071\uff7c\072\uff7c\073" +
    "\uff7c\001\002\000\122\021\164\022\uff92\023\uff92\024\uff92" +
    "\025\uff92\026\160\027\uff92\031\uff92\032\uff92\033\uff92\034" +
    "\uff92\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\042\uff92" +
    "\043\uff92\046\165\047\uff92\050\uff92\051\uff92\052\uff92\053" +
    "\uff92\054\uff92\055\uff92\056\uff92\057\161\060\162\061\163" +
    "\062\uff92\063\uff92\064\uff92\065\uff92\066\uff92\067\uff92\070" +
    "\uff92\071\uff92\072\uff92\073\uff92\001\002\000\026\022\uffb1" +
    "\023\uffb1\024\uffb1\027\uffb1\031\uffb1\032\uffb1\033\uffb1\034" +
    "\102\047\uffb1\050\uffb1\001\002\000\006\027\uffb8\047\145" +
    "\001\002\000\050\004\010\005\014\006\004\007\007\010" +
    "\005\020\030\021\043\034\026\037\031\040\054\042\035" +
    "\044\044\045\051\057\047\060\052\074\037\075\045\076" +
    "\057\077\053\001\002\000\036\020\uff88\021\uff88\034\uff88" +
    "\037\uff88\040\uff88\042\uff88\044\uff88\045\uff88\057\uff88\060" +
    "\uff88\074\uff88\075\uff88\076\uff88\077\uff88\001\002\000\122" +
    "\021\uff79\022\uff79\023\uff79\024\uff79\025\uff79\026\uff79\027" +
    "\uff79\031\uff79\032\uff79\033\uff79\034\uff79\035\uff79\036\uff79" +
    "\037\uff79\040\uff79\041\uff79\042\uff79\043\uff79\046\uff79\047" +
    "\uff79\050\uff79\051\uff79\052\uff79\053\uff79\054\uff79\055\uff79" +
    "\056\uff79\057\uff79\060\uff79\061\uff79\062\uff79\063\uff79\064" +
    "\uff79\065\uff79\066\uff79\067\uff79\070\uff79\071\uff79\072\uff79" +
    "\073\uff79\001\002\000\032\022\uffaf\023\uffaf\024\uffaf\027" +
    "\uffaf\031\uffaf\032\uffaf\033\uffaf\034\uffaf\047\uffaf\050\uffaf" +
    "\051\104\052\106\001\002\000\036\020\030\021\122\034" +
    "\026\037\031\040\054\042\035\044\044\045\051\057\047" +
    "\060\052\074\037\075\045\076\057\077\053\001\002\000" +
    "\022\022\uffb5\023\uffb5\024\uffb5\027\uffb5\031\uffb5\032\120" +
    "\047\uffb5\050\uffb5\001\002\000\036\020\uff87\021\uff87\034" +
    "\uff87\037\uff87\040\uff87\042\uff87\044\uff87\045\uff87\057\uff87" +
    "\060\uff87\074\uff87\075\uff87\076\uff87\077\uff87\001\002\000" +
    "\036\020\030\021\122\034\026\037\031\040\054\042\035" +
    "\044\044\045\051\057\047\060\052\074\037\075\045\076" +
    "\057\077\053\001\002\000\122\021\uff7a\022\uff7a\023\uff7a" +
    "\024\uff7a\025\uff7a\026\uff7a\027\uff7a\031\uff7a\032\uff7a\033" +
    "\uff7a\034\uff7a\035\uff7a\036\uff7a\037\uff7a\040\uff7a\041\uff7a" +
    "\042\uff7a\043\uff7a\046\uff7a\047\uff7a\050\uff7a\051\uff7a\052" +
    "\uff7a\053\uff7a\054\uff7a\055\uff7a\056\uff7a\057\uff7a\060\uff7a" +
    "\061\uff7a\062\uff7a\063\uff7a\064\uff7a\065\uff7a\066\uff7a\067" +
    "\uff7a\070\uff7a\071\uff7a\072\uff7a\073\uff7a\001\002\000\036" +
    "\020\uff89\021\uff89\034\uff89\037\uff89\040\uff89\042\uff89\044" +
    "\uff89\045\uff89\057\uff89\060\uff89\074\uff89\075\uff89\076\uff89" +
    "\077\uff89\001\002\000\020\022\uffb7\023\uffb7\024\uffb7\027" +
    "\uffb7\031\uffb7\047\uffb7\050\116\001\002\000\122\021\uff86" +
    "\022\uff86\023\uff86\024\uff86\025\uff86\026\uff86\027\uff86\031" +
    "\uff86\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86" +
    "\040\uff86\041\uff86\042\uff86\043\uff86\046\uff86\047\uff86\050" +
    "\uff86\051\uff86\052\uff86\053\uff86\054\uff86\055\uff86\056\uff86" +
    "\057\uff86\060\uff86\061\uff86\062\uff86\063\uff86\064\uff86\065" +
    "\uff86\066\uff86\067\uff86\070\uff86\071\uff86\072\uff86\073\uff86" +
    "\001\002\000\122\021\uff7b\022\uff7b\023\uff7b\024\uff7b\025" +
    "\uff7b\026\uff7b\027\uff7b\031\uff7b\032\uff7b\033\uff7b\034\uff7b" +
    "\035\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\042\uff7b\043" +
    "\uff7b\046\uff7b\047\uff7b\050\uff7b\051\uff7b\052\uff7b\053\uff7b" +
    "\054\uff7b\055\uff7b\056\uff7b\057\uff7b\060\uff7b\061\uff7b\062" +
    "\uff7b\063\uff7b\064\uff7b\065\uff7b\066\uff7b\067\uff7b\070\uff7b" +
    "\071\uff7b\072\uff7b\073\uff7b\001\002\000\024\022\uffb3\023" +
    "\uffb3\024\uffb3\027\uffb3\031\uffb3\032\uffb3\033\100\047\uffb3" +
    "\050\uffb3\001\002\000\046\022\uffa9\023\uffa9\024\uffa9\027" +
    "\uffa9\031\uffa9\032\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9" +
    "\047\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055" +
    "\065\056\063\001\002\000\106\022\uff96\023\uff96\024\uff96" +
    "\025\uff96\027\uff96\031\uff96\032\uff96\033\uff96\034\uff96\035" +
    "\uff96\036\uff96\037\uff96\040\uff96\041\uff96\042\uff96\043\uff96" +
    "\047\uff96\050\uff96\051\uff96\052\uff96\053\uff96\054\uff96\055" +
    "\uff96\056\uff96\062\uff96\063\uff96\064\uff96\065\uff96\066\uff96" +
    "\067\uff96\070\uff96\071\uff96\072\uff96\073\uff96\001\002\000" +
    "\036\020\uffa1\021\uffa1\034\uffa1\037\uffa1\040\uffa1\042\uffa1" +
    "\044\uffa1\045\uffa1\057\uffa1\060\uffa1\074\uffa1\075\uffa1\076" +
    "\uffa1\077\uffa1\001\002\000\036\020\030\021\043\034\026" +
    "\037\031\040\054\042\035\044\044\045\051\057\047\060" +
    "\052\074\037\075\045\076\057\077\053\001\002\000\036" +
    "\020\uffa0\021\uffa0\034\uffa0\037\uffa0\040\uffa0\042\uffa0\044" +
    "\uffa0\045\uffa0\057\uffa0\060\uffa0\074\uffa0\075\uffa0\076\uffa0" +
    "\077\uffa0\001\002\000\052\022\uffa2\023\uffa2\024\uffa2\027" +
    "\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2" +
    "\037\070\040\071\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053" +
    "\uffa2\054\uffa2\055\uffa2\056\uffa2\001\002\000\036\020\030" +
    "\021\043\034\026\037\031\040\054\042\035\044\044\045" +
    "\051\057\047\060\052\074\037\075\045\076\057\077\053" +
    "\001\002\000\036\020\uff9d\021\uff9d\034\uff9d\037\uff9d\040" +
    "\uff9d\042\uff9d\044\uff9d\045\uff9d\057\uff9d\060\uff9d\074\uff9d" +
    "\075\uff9d\076\uff9d\077\uff9d\001\002\000\036\020\uff9c\021" +
    "\uff9c\034\uff9c\037\uff9c\040\uff9c\042\uff9c\044\uff9c\045\uff9c" +
    "\057\uff9c\060\uff9c\074\uff9c\075\uff9c\076\uff9c\077\uff9c\001" +
    "\002\000\060\022\uff9e\023\uff9e\024\uff9e\027\uff9e\031\uff9e" +
    "\032\uff9e\033\uff9e\034\uff9e\035\uff9e\036\uff9e\037\uff9e\040" +
    "\uff9e\041\074\042\076\043\073\047\uff9e\050\uff9e\051\uff9e" +
    "\052\uff9e\053\uff9e\054\uff9e\055\uff9e\056\uff9e\001\002\000" +
    "\036\020\uff97\021\uff97\034\uff97\037\uff97\040\uff97\042\uff97" +
    "\044\uff97\045\uff97\057\uff97\060\uff97\074\uff97\075\uff97\076" +
    "\uff97\077\uff97\001\002\000\036\020\uff98\021\uff98\034\uff98" +
    "\037\uff98\040\uff98\042\uff98\044\uff98\045\uff98\057\uff98\060" +
    "\uff98\074\uff98\075\uff98\076\uff98\077\uff98\001\002\000\036" +
    "\020\030\021\043\034\026\037\031\040\054\042\035\044" +
    "\044\045\051\057\047\060\052\074\037\075\045\076\057" +
    "\077\053\001\002\000\036\020\uff99\021\uff99\034\uff99\037" +
    "\uff99\040\uff99\042\uff99\044\uff99\045\uff99\057\uff99\060\uff99" +
    "\074\uff99\075\uff99\076\uff99\077\uff99\001\002\000\060\022" +
    "\uff9a\023\uff9a\024\uff9a\027\uff9a\031\uff9a\032\uff9a\033\uff9a" +
    "\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a\041\uff9a\042" +
    "\uff9a\043\uff9a\047\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a" +
    "\054\uff9a\055\uff9a\056\uff9a\001\002\000\036\020\030\021" +
    "\043\034\026\037\031\040\054\042\035\044\044\045\051" +
    "\057\047\060\052\074\037\075\045\076\057\077\053\001" +
    "\002\000\026\022\uffb0\023\uffb0\024\uffb0\027\uffb0\031\uffb0" +
    "\032\uffb0\033\uffb0\034\102\047\uffb0\050\uffb0\001\002\000" +
    "\036\020\030\021\043\034\026\037\031\040\054\042\035" +
    "\044\044\045\051\057\047\060\052\074\037\075\045\076" +
    "\057\077\053\001\002\000\032\022\uffae\023\uffae\024\uffae" +
    "\027\uffae\031\uffae\032\uffae\033\uffae\034\uffae\047\uffae\050" +
    "\uffae\051\104\052\106\001\002\000\036\020\uffab\021\uffab" +
    "\034\uffab\037\uffab\040\uffab\042\uffab\044\uffab\045\uffab\057" +
    "\uffab\060\uffab\074\uffab\075\uffab\076\uffab\077\uffab\001\002" +
    "\000\036\020\030\021\043\034\026\037\031\040\054\042" +
    "\035\044\044\045\051\057\047\060\052\074\037\075\045" +
    "\076\057\077\053\001\002\000\036\020\uffaa\021\uffaa\034" +
    "\uffaa\037\uffaa\040\uffaa\042\uffaa\044\uffaa\045\uffaa\057\uffaa" +
    "\060\uffaa\074\uffaa\075\uffaa\076\uffaa\077\uffaa\001\002\000" +
    "\042\022\uffac\023\uffac\024\uffac\027\uffac\031\uffac\032\uffac" +
    "\033\uffac\034\uffac\035\110\036\111\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\112\054\113\001\002\000\036\020\uffa7" +
    "\021\uffa7\034\uffa7\037\uffa7\040\uffa7\042\uffa7\044\uffa7\045" +
    "\uffa7\057\uffa7\060\uffa7\074\uffa7\075\uffa7\076\uffa7\077\uffa7" +
    "\001\002\000\036\020\uffa6\021\uffa6\034\uffa6\037\uffa6\040" +
    "\uffa6\042\uffa6\044\uffa6\045\uffa6\057\uffa6\060\uffa6\074\uffa6" +
    "\075\uffa6\076\uffa6\077\uffa6\001\002\000\036\020\uffa5\021" +
    "\uffa5\034\uffa5\037\uffa5\040\uffa5\042\uffa5\044\uffa5\045\uffa5" +
    "\057\uffa5\060\uffa5\074\uffa5\075\uffa5\076\uffa5\077\uffa5\001" +
    "\002\000\036\020\uffa4\021\uffa4\034\uffa4\037\uffa4\040\uffa4" +
    "\042\uffa4\044\uffa4\045\uffa4\057\uffa4\060\uffa4\074\uffa4\075" +
    "\uffa4\076\uffa4\077\uffa4\001\002\000\036\020\030\021\043" +
    "\034\026\037\031\040\054\042\035\044\044\045\051\057" +
    "\047\060\052\074\037\075\045\076\057\077\053\001\002" +
    "\000\046\022\uffa8\023\uffa8\024\uffa8\027\uffa8\031\uffa8\032" +
    "\uffa8\033\uffa8\034\uffa8\035\uffa8\036\uffa8\047\uffa8\050\uffa8" +
    "\051\uffa8\052\uffa8\053\uffa8\054\uffa8\055\065\056\063\001" +
    "\002\000\036\020\030\021\043\034\026\037\031\040\054" +
    "\042\035\044\044\045\051\057\047\060\052\074\037\075" +
    "\045\076\057\077\053\001\002\000\022\022\uffb4\023\uffb4" +
    "\024\uffb4\027\uffb4\031\uffb4\032\120\047\uffb4\050\uffb4\001" +
    "\002\000\036\020\030\021\043\034\026\037\031\040\054" +
    "\042\035\044\044\045\051\057\047\060\052\074\037\075" +
    "\045\076\057\077\053\001\002\000\024\022\uffb2\023\uffb2" +
    "\024\uffb2\027\uffb2\031\uffb2\032\uffb2\033\100\047\uffb2\050" +
    "\uffb2\001\002\000\036\020\030\021\043\034\026\037\031" +
    "\040\054\042\035\044\044\045\051\057\047\060\052\074" +
    "\037\075\045\076\057\077\053\001\002\000\106\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\027\uff90\031\uff90\032\uff90\033" +
    "\uff90\034\uff90\035\uff90\036\uff90\037\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\047\uff90\050\uff90\051\uff90\052\uff90\053" +
    "\uff90\054\uff90\055\uff90\056\uff90\062\uff90\063\uff90\064\uff90" +
    "\065\uff90\066\uff90\067\uff90\070\uff90\071\uff90\072\uff90\073" +
    "\uff90\001\002\000\006\022\150\024\147\001\002\000\016" +
    "\022\uffc5\023\uffc5\024\uffc5\027\uffc5\031\uffc5\047\145\001" +
    "\002\000\012\022\uffc7\023\uffc7\024\uffc7\027\uffc7\001\002" +
    "\000\106\022\uff96\023\uff96\024\uff96\025\137\027\uff96\031" +
    "\uff96\032\uff96\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96" +
    "\040\uff96\041\uff96\042\uff96\043\uff96\047\uff96\050\uff96\051" +
    "\uff96\052\uff96\053\uff96\054\uff96\055\uff96\056\uff96\062\131" +
    "\063\133\064\142\065\132\066\143\067\140\070\135\071" +
    "\130\072\141\073\136\001\002\000\036\020\uffba\021\uffba" +
    "\034\uffba\037\uffba\040\uffba\042\uffba\044\uffba\045\uffba\057" +
    "\uffba\060\uffba\074\uffba\075\uffba\076\uffba\077\uffba\001\002" +
    "\000\036\020\uffc2\021\uffc2\034\uffc2\037\uffc2\040\uffc2\042" +
    "\uffc2\044\uffc2\045\uffc2\057\uffc2\060\uffc2\074\uffc2\075\uffc2" +
    "\076\uffc2\077\uffc2\001\002\000\036\020\uffbe\021\uffbe\034" +
    "\uffbe\037\uffbe\040\uffbe\042\uffbe\044\uffbe\045\uffbe\057\uffbe" +
    "\060\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\001\002\000" +
    "\036\020\uffc1\021\uffc1\034\uffc1\037\uffc1\040\uffc1\042\uffc1" +
    "\044\uffc1\045\uffc1\057\uffc1\060\uffc1\074\uffc1\075\uffc1\076" +
    "\uffc1\077\uffc1\001\002\000\036\020\030\021\043\034\026" +
    "\037\031\040\054\042\035\044\044\045\051\057\047\060" +
    "\052\074\037\075\045\076\057\077\053\001\002\000\036" +
    "\020\uffbb\021\uffbb\034\uffbb\037\uffbb\040\uffbb\042\uffbb\044" +
    "\uffbb\045\uffbb\057\uffbb\060\uffbb\074\uffbb\075\uffbb\076\uffbb" +
    "\077\uffbb\001\002\000\036\020\uffbf\021\uffbf\034\uffbf\037" +
    "\uffbf\040\uffbf\042\uffbf\044\uffbf\045\uffbf\057\uffbf\060\uffbf" +
    "\074\uffbf\075\uffbf\076\uffbf\077\uffbf\001\002\000\036\020" +
    "\uffc3\021\uffc3\034\uffc3\037\uffc3\040\uffc3\042\uffc3\044\uffc3" +
    "\045\uffc3\057\uffc3\060\uffc3\074\uffc3\075\uffc3\076\uffc3\077" +
    "\uffc3\001\002\000\036\020\uffbc\021\uffbc\034\uffbc\037\uffbc" +
    "\040\uffbc\042\uffbc\044\uffbc\045\uffbc\057\uffbc\060\uffbc\074" +
    "\uffbc\075\uffbc\076\uffbc\077\uffbc\001\002\000\036\020\uffb9" +
    "\021\uffb9\034\uffb9\037\uffb9\040\uffb9\042\uffb9\044\uffb9\045" +
    "\uffb9\057\uffb9\060\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9" +
    "\001\002\000\036\020\uffc0\021\uffc0\034\uffc0\037\uffc0\040" +
    "\uffc0\042\uffc0\044\uffc0\045\uffc0\057\uffc0\060\uffc0\074\uffc0" +
    "\075\uffc0\076\uffc0\077\uffc0\001\002\000\036\020\uffbd\021" +
    "\uffbd\034\uffbd\037\uffbd\040\uffbd\042\uffbd\044\uffbd\045\uffbd" +
    "\057\uffbd\060\uffbd\074\uffbd\075\uffbd\076\uffbd\077\uffbd\001" +
    "\002\000\014\022\uffc4\023\uffc4\024\uffc4\027\uffc4\031\uffc4" +
    "\001\002\000\036\020\030\021\043\034\026\037\031\040" +
    "\054\042\035\044\044\045\051\057\047\060\052\074\037" +
    "\075\045\076\057\077\053\001\002\000\020\022\uffb6\023" +
    "\uffb6\024\uffb6\027\uffb6\031\uffb6\047\uffb6\050\116\001\002" +
    "\000\036\020\030\021\043\034\026\037\031\040\054\042" +
    "\035\044\044\045\051\057\047\060\052\074\037\075\045" +
    "\076\057\077\053\001\002\000\122\021\uff78\022\uff78\023" +
    "\uff78\024\uff78\025\uff78\026\uff78\027\uff78\031\uff78\032\uff78" +
    "\033\uff78\034\uff78\035\uff78\036\uff78\037\uff78\040\uff78\041" +
    "\uff78\042\uff78\043\uff78\046\uff78\047\uff78\050\uff78\051\uff78" +
    "\052\uff78\053\uff78\054\uff78\055\uff78\056\uff78\057\uff78\060" +
    "\uff78\061\uff78\062\uff78\063\uff78\064\uff78\065\uff78\066\uff78" +
    "\067\uff78\070\uff78\071\uff78\072\uff78\073\uff78\001\002\000" +
    "\012\022\uffc6\023\uffc6\024\uffc6\027\uffc6\001\002\000\106" +
    "\022\uff91\023\uff91\024\uff91\025\uff91\027\uff91\031\uff91\032" +
    "\uff91\033\uff91\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91" +
    "\041\uff91\042\uff91\043\uff91\047\uff91\050\uff91\051\uff91\052" +
    "\uff91\053\uff91\054\uff91\055\uff91\056\uff91\062\uff91\063\uff91" +
    "\064\uff91\065\uff91\066\uff91\067\uff91\070\uff91\071\uff91\072" +
    "\uff91\073\uff91\001\002\000\006\022\uff94\042\uff94\001\002" +
    "\000\006\022\155\042\156\001\002\000\036\020\030\021" +
    "\043\034\026\037\031\040\054\042\035\044\044\045\051" +
    "\057\047\060\052\074\037\075\045\076\057\077\053\001" +
    "\002\000\006\022\uff93\042\uff93\001\002\000\106\022\uff95" +
    "\023\uff95\024\uff95\025\uff95\027\uff95\031\uff95\032\uff95\033" +
    "\uff95\034\uff95\035\uff95\036\uff95\037\uff95\040\uff95\041\uff95" +
    "\042\uff95\043\uff95\047\uff95\050\uff95\051\uff95\052\uff95\053" +
    "\uff95\054\uff95\055\uff95\056\uff95\062\uff95\063\uff95\064\uff95" +
    "\065\uff95\066\uff95\067\uff95\070\uff95\071\uff95\072\uff95\073" +
    "\uff95\001\002\000\036\020\030\021\043\034\026\037\031" +
    "\040\054\042\035\044\044\045\051\057\047\060\052\074" +
    "\037\075\045\076\057\077\053\001\002\000\122\021\uff80" +
    "\022\uff80\023\uff80\024\uff80\025\uff80\026\uff80\027\uff80\031" +
    "\uff80\032\uff80\033\uff80\034\uff80\035\uff80\036\uff80\037\uff80" +
    "\040\uff80\041\uff80\042\uff80\043\uff80\046\uff80\047\uff80\050" +
    "\uff80\051\uff80\052\uff80\053\uff80\054\uff80\055\uff80\056\uff80" +
    "\057\uff80\060\uff80\061\uff80\062\uff80\063\uff80\064\uff80\065" +
    "\uff80\066\uff80\067\uff80\070\uff80\071\uff80\072\uff80\073\uff80" +
    "\001\002\000\122\021\uff7f\022\uff7f\023\uff7f\024\uff7f\025" +
    "\uff7f\026\uff7f\027\uff7f\031\uff7f\032\uff7f\033\uff7f\034\uff7f" +
    "\035\uff7f\036\uff7f\037\uff7f\040\uff7f\041\uff7f\042\uff7f\043" +
    "\uff7f\046\uff7f\047\uff7f\050\uff7f\051\uff7f\052\uff7f\053\uff7f" +
    "\054\uff7f\055\uff7f\056\uff7f\057\uff7f\060\uff7f\061\uff7f\062" +
    "\uff7f\063\uff7f\064\uff7f\065\uff7f\066\uff7f\067\uff7f\070\uff7f" +
    "\071\uff7f\072\uff7f\073\uff7f\001\002\000\004\074\175\001" +
    "\002\000\040\020\030\021\043\022\167\034\026\037\031" +
    "\040\054\042\035\044\044\045\051\057\047\060\052\074" +
    "\037\075\045\076\057\077\053\001\002\000\004\074\166" +
    "\001\002\000\122\021\uff82\022\uff82\023\uff82\024\uff82\025" +
    "\uff82\026\uff82\027\uff82\031\uff82\032\uff82\033\uff82\034\uff82" +
    "\035\uff82\036\uff82\037\uff82\040\uff82\041\uff82\042\uff82\043" +
    "\uff82\046\uff82\047\uff82\050\uff82\051\uff82\052\uff82\053\uff82" +
    "\054\uff82\055\uff82\056\uff82\057\uff82\060\uff82\061\uff82\062" +
    "\uff82\063\uff82\064\uff82\065\uff82\066\uff82\067\uff82\070\uff82" +
    "\071\uff82\072\uff82\073\uff82\001\002\000\122\021\uff83\022" +
    "\uff83\023\uff83\024\uff83\025\uff83\026\uff83\027\uff83\031\uff83" +
    "\032\uff83\033\uff83\034\uff83\035\uff83\036\uff83\037\uff83\040" +
    "\uff83\041\uff83\042\uff83\043\uff83\046\uff83\047\uff83\050\uff83" +
    "\051\uff83\052\uff83\053\uff83\054\uff83\055\uff83\056\uff83\057" +
    "\uff83\060\uff83\061\uff83\062\uff83\063\uff83\064\uff83\065\uff83" +
    "\066\uff83\067\uff83\070\uff83\071\uff83\072\uff83\073\uff83\001" +
    "\002\000\006\022\uff7e\024\uff7e\001\002\000\006\022\173" +
    "\024\172\001\002\000\036\020\030\021\043\034\026\037" +
    "\031\040\054\042\035\044\044\045\051\057\047\060\052" +
    "\074\037\075\045\076\057\077\053\001\002\000\122\021" +
    "\uff84\022\uff84\023\uff84\024\uff84\025\uff84\026\uff84\027\uff84" +
    "\031\uff84\032\uff84\033\uff84\034\uff84\035\uff84\036\uff84\037" +
    "\uff84\040\uff84\041\uff84\042\uff84\043\uff84\046\uff84\047\uff84" +
    "\050\uff84\051\uff84\052\uff84\053\uff84\054\uff84\055\uff84\056" +
    "\uff84\057\uff84\060\uff84\061\uff84\062\uff84\063\uff84\064\uff84" +
    "\065\uff84\066\uff84\067\uff84\070\uff84\071\uff84\072\uff84\073" +
    "\uff84\001\002\000\006\022\uff7d\024\uff7d\001\002\000\122" +
    "\021\uff81\022\uff81\023\uff81\024\uff81\025\uff81\026\uff81\027" +
    "\uff81\031\uff81\032\uff81\033\uff81\034\uff81\035\uff81\036\uff81" +
    "\037\uff81\040\uff81\041\uff81\042\uff81\043\uff81\046\uff81\047" +
    "\uff81\050\uff81\051\uff81\052\uff81\053\uff81\054\uff81\055\uff81" +
    "\056\uff81\057\uff81\060\uff81\061\uff81\062\uff81\063\uff81\064" +
    "\uff81\065\uff81\066\uff81\067\uff81\070\uff81\071\uff81\072\uff81" +
    "\073\uff81\001\002\000\006\024\147\027\177\001\002\000" +
    "\122\021\uff85\022\uff85\023\uff85\024\uff85\025\uff85\026\uff85" +
    "\027\uff85\031\uff85\032\uff85\033\uff85\034\uff85\035\uff85\036" +
    "\uff85\037\uff85\040\uff85\041\uff85\042\uff85\043\uff85\046\uff85" +
    "\047\uff85\050\uff85\051\uff85\052\uff85\053\uff85\054\uff85\055" +
    "\uff85\056\uff85\057\uff85\060\uff85\061\uff85\062\uff85\063\uff85" +
    "\064\uff85\065\uff85\066\uff85\067\uff85\070\uff85\071\uff85\072" +
    "\uff85\073\uff85\001\002\000\016\022\uffda\023\uffda\024\uffda" +
    "\025\uffda\027\uffda\030\uffda\001\002\000\106\022\uff8f\023" +
    "\uff8f\024\uff8f\025\uff8f\027\uff8f\031\uff8f\032\uff8f\033\uff8f" +
    "\034\uff8f\035\uff8f\036\uff8f\037\uff8f\040\uff8f\041\uff8f\042" +
    "\uff8f\043\uff8f\047\uff8f\050\uff8f\051\uff8f\052\uff8f\053\uff8f" +
    "\054\uff8f\055\uff8f\056\uff8f\062\uff8f\063\uff8f\064\uff8f\065" +
    "\uff8f\066\uff8f\067\uff8f\070\uff8f\071\uff8f\072\uff8f\073\uff8f" +
    "\001\002\000\050\004\010\005\014\006\004\007\007\010" +
    "\005\020\030\021\043\034\026\037\031\040\054\042\035" +
    "\044\044\045\051\057\047\060\052\074\037\075\045\076" +
    "\057\077\053\001\002\000\106\022\uff8e\023\uff8e\024\uff8e" +
    "\025\uff8e\027\uff8e\031\uff8e\032\uff8e\033\uff8e\034\uff8e\035" +
    "\uff8e\036\uff8e\037\uff8e\040\uff8e\041\uff8e\042\uff8e\043\uff8e" +
    "\047\uff8e\050\uff8e\051\uff8e\052\uff8e\053\uff8e\054\uff8e\055" +
    "\uff8e\056\uff8e\062\uff8e\063\uff8e\064\uff8e\065\uff8e\066\uff8e" +
    "\067\uff8e\070\uff8e\071\uff8e\072\uff8e\073\uff8e\001\002\000" +
    "\006\022\205\042\156\001\002\000\106\022\uff8d\023\uff8d" +
    "\024\uff8d\025\uff8d\027\uff8d\031\uff8d\032\uff8d\033\uff8d\034" +
    "\uff8d\035\uff8d\036\uff8d\037\uff8d\040\uff8d\041\uff8d\042\uff8d" +
    "\043\uff8d\047\uff8d\050\uff8d\051\uff8d\052\uff8d\053\uff8d\054" +
    "\uff8d\055\uff8d\056\uff8d\062\uff8d\063\uff8d\064\uff8d\065\uff8d" +
    "\066\uff8d\067\uff8d\070\uff8d\071\uff8d\072\uff8d\073\uff8d\001" +
    "\002\000\014\022\uffde\023\uffde\024\uffde\025\uffde\030\uffde" +
    "\001\002\000\016\004\010\005\014\006\004\007\007\010" +
    "\005\022\212\001\002\000\006\022\ufff7\024\ufff7\001\002" +
    "\000\006\022\216\024\215\001\002\000\016\022\uffdb\023" +
    "\uffdb\024\uffdb\025\uffdb\027\uffdb\030\uffdb\001\002\000\006" +
    "\042\022\074\021\001\002\000\006\022\uffe0\024\uffe0\001" +
    "\002\000\014\004\010\005\014\006\004\007\007\010\005" +
    "\001\002\000\016\022\uffdc\023\uffdc\024\uffdc\025\uffdc\027" +
    "\uffdc\030\uffdc\001\002\000\006\022\ufff6\024\ufff6\001\002" +
    "\000\016\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\010" +
    "\ufff8\001\002\000\014\004\010\005\014\006\004\007\007" +
    "\010\005\001\002\000\040\020\030\021\043\030\224\034" +
    "\026\037\031\040\054\042\035\044\044\045\051\057\047" +
    "\060\052\074\037\075\045\076\057\077\053\001\002\000" +
    "\010\023\uffef\024\uffef\031\uffef\001\002\000\040\020\030" +
    "\021\043\030\224\034\026\037\031\040\054\042\035\044" +
    "\044\045\051\057\047\060\052\074\037\075\045\076\057" +
    "\077\053\001\002\000\006\023\ufff1\024\ufff1\001\002\000" +
    "\006\024\230\031\231\001\002\000\006\024\uffed\031\uffed" +
    "\001\002\000\040\020\030\021\043\030\224\034\026\037" +
    "\031\040\054\042\035\044\044\045\051\057\047\060\052" +
    "\074\037\075\045\076\057\077\053\001\002\000\010\023" +
    "\uffee\024\uffee\031\uffee\001\002\000\006\024\uffec\031\uffec" +
    "\001\002\000\070\004\ufffa\005\ufffa\006\ufffa\007\ufffa\010" +
    "\ufffa\011\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017\ufffa" +
    "\020\ufffa\021\ufffa\023\ufffa\030\ufffa\034\ufffa\037\ufffa\040" +
    "\ufffa\042\ufffa\044\ufffa\045\ufffa\057\ufffa\060\ufffa\074\ufffa" +
    "\075\ufffa\076\ufffa\077\ufffa\001\002\000\010\023\017\042" +
    "\022\074\021\001\002\000\070\004\010\005\014\006\004" +
    "\007\007\010\005\011\243\013\252\014\240\015\237\016" +
    "\247\017\245\020\030\021\043\023\241\030\221\034\026" +
    "\037\031\040\054\042\035\044\044\045\051\057\047\060" +
    "\052\074\037\075\045\076\057\077\053\001\002\000\062" +
    "\011\uffd5\012\uffd5\013\uffd5\014\uffd5\015\uffd5\016\uffd5\017" +
    "\uffd5\020\uffd5\021\uffd5\023\uffd5\030\uffd5\031\uffd5\034\uffd5" +
    "\037\uffd5\040\uffd5\042\uffd5\044\uffd5\045\uffd5\057\uffd5\060" +
    "\uffd5\074\uffd5\075\uffd5\076\uffd5\077\uffd5\001\002\000\004" +
    "\023\310\001\002\000\004\021\276\001\002\000\062\011" +
    "\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\020\uffd1\021\uffd1\023\uffd1\030\uffd1\031\uffd1\034\uffd1\037" +
    "\uffd1\040\uffd1\042\uffd1\044\uffd1\045\uffd1\057\uffd1\060\uffd1" +
    "\074\uffd1\075\uffd1\076\uffd1\077\uffd1\001\002\000\062\011" +
    "\uffd8\012\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8" +
    "\020\uffd8\021\uffd8\023\uffd8\030\uffd8\031\uffd8\034\uffd8\037" +
    "\uffd8\040\uffd8\042\uffd8\044\uffd8\045\uffd8\057\uffd8\060\uffd8" +
    "\074\uffd8\075\uffd8\076\uffd8\077\uffd8\001\002\000\004\021" +
    "\270\001\002\000\060\011\243\013\252\014\240\015\237" +
    "\016\247\017\245\020\030\021\043\023\241\030\221\031" +
    "\266\034\026\037\031\040\054\042\035\044\044\045\051" +
    "\057\047\060\052\074\037\075\045\076\057\077\053\001" +
    "\002\000\040\020\030\021\043\023\241\034\026\037\031" +
    "\040\054\042\035\044\044\045\051\057\047\060\052\074" +
    "\037\075\045\076\057\077\053\001\002\000\062\011\uffd6" +
    "\012\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\017\uffd6\020" +
    "\uffd6\021\uffd6\023\uffd6\030\uffd6\031\uffd6\034\uffd6\037\uffd6" +
    "\040\uffd6\042\uffd6\044\uffd6\045\uffd6\057\uffd6\060\uffd6\074" +
    "\uffd6\075\uffd6\076\uffd6\077\uffd6\001\002\000\004\023\263" +
    "\001\002\000\062\011\uffd9\012\uffd9\013\uffd9\014\uffd9\015" +
    "\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\023\uffd9\030\uffd9" +
    "\031\uffd9\034\uffd9\037\uffd9\040\uffd9\042\uffd9\044\uffd9\045" +
    "\uffd9\057\uffd9\060\uffd9\074\uffd9\075\uffd9\076\uffd9\077\uffd9" +
    "\001\002\000\062\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015" +
    "\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\023\uffd7\030\uffd7" +
    "\031\uffd7\034\uffd7\037\uffd7\040\uffd7\042\uffd7\044\uffd7\045" +
    "\uffd7\057\uffd7\060\uffd7\074\uffd7\075\uffd7\076\uffd7\077\uffd7" +
    "\001\002\000\004\021\257\001\002\000\006\023\256\024" +
    "\147\001\002\000\070\004\ufff9\005\ufff9\006\ufff9\007\ufff9" +
    "\010\ufff9\011\ufff9\013\ufff9\014\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\020\ufff9\021\ufff9\023\ufff9\030\ufff9\034\ufff9\037\ufff9" +
    "\040\ufff9\042\ufff9\044\ufff9\045\ufff9\057\ufff9\060\ufff9\074" +
    "\ufff9\075\ufff9\076\ufff9\077\ufff9\001\002\000\060\011\uffd4" +
    "\013\uffd4\014\uffd4\015\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\023\uffd4\030\uffd4\031\uffd4\034\uffd4\037\uffd4\040\uffd4" +
    "\042\uffd4\044\uffd4\045\uffd4\057\uffd4\060\uffd4\074\uffd4\075" +
    "\uffd4\076\uffd4\077\uffd4\001\002\000\062\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\017\uffd2\020\uffd2\021" +
    "\uffd2\023\uffd2\030\uffd2\031\uffd2\034\uffd2\037\uffd2\040\uffd2" +
    "\042\uffd2\044\uffd2\045\uffd2\057\uffd2\060\uffd2\074\uffd2\075" +
    "\uffd2\076\uffd2\077\uffd2\001\002\000\036\020\030\021\043" +
    "\034\026\037\031\040\054\042\035\044\044\045\051\057" +
    "\047\060\052\074\037\075\045\076\057\077\053\001\002" +
    "\000\006\022\261\024\147\001\002\000\056\011\243\013" +
    "\252\014\240\015\237\016\247\017\245\020\030\021\043" +
    "\023\241\030\221\034\026\037\031\040\054\042\035\044" +
    "\044\045\051\057\047\060\052\074\037\075\045\076\057" +
    "\077\053\001\002\000\062\011\uffcd\012\uffcd\013\uffcd\014" +
    "\uffcd\015\uffcd\016\uffcd\017\uffcd\020\uffcd\021\uffcd\023\uffcd" +
    "\030\uffcd\031\uffcd\034\uffcd\037\uffcd\040\uffcd\042\uffcd\044" +
    "\uffcd\045\uffcd\057\uffcd\060\uffcd\074\uffcd\075\uffcd\076\uffcd" +
    "\077\uffcd\001\002\000\062\011\uffc9\012\uffc9\013\uffc9\014" +
    "\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\021\uffc9\023\uffc9" +
    "\030\uffc9\031\uffc9\034\uffc9\037\uffc9\040\uffc9\042\uffc9\044" +
    "\uffc9\045\uffc9\057\uffc9\060\uffc9\074\uffc9\075\uffc9\076\uffc9" +
    "\077\uffc9\001\002\000\004\023\265\001\002\000\062\011" +
    "\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017\uffc8" +
    "\020\uffc8\021\uffc8\023\uffc8\030\uffc8\031\uffc8\034\uffc8\037" +
    "\uffc8\040\uffc8\042\uffc8\044\uffc8\045\uffc8\057\uffc8\060\uffc8" +
    "\074\uffc8\075\uffc8\076\uffc8\077\uffc8\001\002\000\076\002" +
    "\uffd0\004\uffd0\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0" +
    "\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017\uffd0\020" +
    "\uffd0\021\uffd0\023\uffd0\030\uffd0\031\uffd0\034\uffd0\037\uffd0" +
    "\040\uffd0\042\uffd0\044\uffd0\045\uffd0\057\uffd0\060\uffd0\074" +
    "\uffd0\075\uffd0\076\uffd0\077\uffd0\001\002\000\060\011\uffd3" +
    "\013\uffd3\014\uffd3\015\uffd3\016\uffd3\017\uffd3\020\uffd3\021" +
    "\uffd3\023\uffd3\030\uffd3\031\uffd3\034\uffd3\037\uffd3\040\uffd3" +
    "\042\uffd3\044\uffd3\045\uffd3\057\uffd3\060\uffd3\074\uffd3\075" +
    "\uffd3\076\uffd3\077\uffd3\001\002\000\036\020\030\021\043" +
    "\034\026\037\031\040\054\042\035\044\044\045\051\057" +
    "\047\060\052\074\037\075\045\076\057\077\053\001\002" +
    "\000\006\022\272\024\147\001\002\000\056\011\243\013" +
    "\252\014\240\015\237\016\247\017\245\020\030\021\043" +
    "\023\241\030\221\034\026\037\031\040\054\042\035\044" +
    "\044\045\051\057\047\060\052\074\037\075\045\076\057" +
    "\077\053\001\002\000\062\011\uffcf\012\274\013\uffcf\014" +
    "\uffcf\015\uffcf\016\uffcf\017\uffcf\020\uffcf\021\uffcf\023\uffcf" +
    "\030\uffcf\031\uffcf\034\uffcf\037\uffcf\040\uffcf\042\uffcf\044" +
    "\uffcf\045\uffcf\057\uffcf\060\uffcf\074\uffcf\075\uffcf\076\uffcf" +
    "\077\uffcf\001\002\000\056\011\243\013\252\014\240\015" +
    "\237\016\247\017\245\020\030\021\043\023\241\030\221" +
    "\034\026\037\031\040\054\042\035\044\044\045\051\057" +
    "\047\060\052\074\037\075\045\076\057\077\053\001\002" +
    "\000\062\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\017\uffce\020\uffce\021\uffce\023\uffce\030\uffce\031\uffce" +
    "\034\uffce\037\uffce\040\uffce\042\uffce\044\uffce\045\uffce\057" +
    "\uffce\060\uffce\074\uffce\075\uffce\076\uffce\077\uffce\001\002" +
    "\000\040\020\030\021\043\023\241\034\026\037\031\040" +
    "\054\042\035\044\044\045\051\057\047\060\052\074\037" +
    "\075\045\076\057\077\053\001\002\000\004\023\300\001" +
    "\002\000\040\020\030\021\043\023\241\034\026\037\031" +
    "\040\054\042\035\044\044\045\051\057\047\060\052\074" +
    "\037\075\045\076\057\077\053\001\002\000\004\023\302" +
    "\001\002\000\040\020\030\021\043\022\304\034\026\037" +
    "\031\040\054\042\035\044\044\045\051\057\047\060\052" +
    "\074\037\075\045\076\057\077\053\001\002\000\006\022" +
    "\306\024\147\001\002\000\056\011\243\013\252\014\240" +
    "\015\237\016\247\017\245\020\030\021\043\023\241\030" +
    "\221\034\026\037\031\040\054\042\035\044\044\045\051" +
    "\057\047\060\052\074\037\075\045\076\057\077\053\001" +
    "\002\000\062\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015\uffcb" +
    "\016\uffcb\017\uffcb\020\uffcb\021\uffcb\023\uffcb\030\uffcb\031" +
    "\uffcb\034\uffcb\037\uffcb\040\uffcb\042\uffcb\044\uffcb\045\uffcb" +
    "\057\uffcb\060\uffcb\074\uffcb\075\uffcb\076\uffcb\077\uffcb\001" +
    "\002\000\056\011\243\013\252\014\240\015\237\016\247" +
    "\017\245\020\030\021\043\023\241\030\221\034\026\037" +
    "\031\040\054\042\035\044\044\045\051\057\047\060\052" +
    "\074\037\075\045\076\057\077\053\001\002\000\062\011" +
    "\uffcc\012\uffcc\013\uffcc\014\uffcc\015\uffcc\016\uffcc\017\uffcc" +
    "\020\uffcc\021\uffcc\023\uffcc\030\uffcc\031\uffcc\034\uffcc\037" +
    "\uffcc\040\uffcc\042\uffcc\044\uffcc\045\uffcc\057\uffcc\060\uffcc" +
    "\074\uffcc\075\uffcc\076\uffcc\077\uffcc\001\002\000\062\011" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\021\uffca\023\uffca\030\uffca\031\uffca\034\uffca\037" +
    "\uffca\040\uffca\042\uffca\044\uffca\045\uffca\057\uffca\060\uffca" +
    "\074\uffca\075\uffca\076\uffca\077\uffca\001\002\000\010\023" +
    "\ufff0\024\ufff0\025\222\001\002\000\006\042\022\074\021" +
    "\001\002\000\072\002\ufffc\004\ufffc\005\ufffc\006\ufffc\007" +
    "\ufffc\010\ufffc\011\ufffc\013\ufffc\014\ufffc\015\ufffc\016\ufffc" +
    "\017\ufffc\020\ufffc\021\ufffc\023\ufffc\030\ufffc\034\ufffc\037" +
    "\ufffc\040\ufffc\042\ufffc\044\ufffc\045\ufffc\057\ufffc\060\ufffc" +
    "\074\ufffc\075\ufffc\076\ufffc\077\ufffc\001\002\000\006\023" +
    "\ufff2\024\ufff2\001\002\000\016\002\uffff\004\uffff\005\uffff" +
    "\006\uffff\007\uffff\010\uffff\001\002\000\004\002\000\001" +
    "\002\000\016\002\001\004\001\005\001\006\001\007\001" +
    "\010\001\001\002\000\014\022\uffe8\023\uffe8\030\335\042" +
    "\uffe8\074\uffe8\001\002\000\014\004\010\005\014\006\004" +
    "\007\007\010\005\001\002\000\016\004\010\005\014\006" +
    "\004\007\007\010\005\031\332\001\002\000\006\042\022" +
    "\074\021\001\002\000\006\023\327\024\326\001\002\000" +
    "\006\023\ufff5\024\ufff5\001\002\000\006\042\022\074\021" +
    "\001\002\000\016\004\uffe2\005\uffe2\006\uffe2\007\uffe2\010" +
    "\uffe2\031\uffe2\001\002\000\006\023\ufff4\024\ufff4\001\002" +
    "\000\006\042\022\074\021\001\002\000\012\022\uffe6\023" +
    "\uffe6\042\uffe6\074\uffe6\001\002\000\006\023\334\024\326" +
    "\001\002\000\016\004\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\031\uffe1\001\002\000\014\004\010\005\014\006\004" +
    "\007\007\010\005\001\002\000\016\004\010\005\014\006" +
    "\004\007\007\010\005\031\337\001\002\000\012\022\uffe4" +
    "\023\uffe4\042\uffe4\074\uffe4\001\002\000\014\022\uffe7\023" +
    "\uffe7\030\344\042\uffe7\074\uffe7\001\002\000\014\004\010" +
    "\005\014\006\004\007\007\010\005\001\002\000\016\004" +
    "\010\005\014\006\004\007\007\010\005\031\343\001\002" +
    "\000\012\022\uffe5\023\uffe5\042\uffe5\074\uffe5\001\002\000" +
    "\014\004\010\005\014\006\004\007\007\010\005\001\002" +
    "\000\016\004\010\005\014\006\004\007\007\010\005\031" +
    "\346\001\002\000\012\022\uffe3\023\uffe3\042\uffe3\074\uffe3" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\344\000\012\002\010\003\011\005\005\014\012\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\003\316\005" +
    "\314\014\012\001\001\000\002\001\001\000\012\010\014" +
    "\011\015\017\017\020\022\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\217\001\001\000\002\001\001\000\006\017\205\020" +
    "\022\001\001\000\002\001\001\000\042\033\033\034\041" +
    "\035\054\036\047\037\057\040\040\041\045\043\026\045" +
    "\060\047\024\051\035\053\031\055\061\056\032\057\037" +
    "\061\055\001\001\000\004\050\066\001\001\000\002\001" +
    "\001\000\004\044\113\001\001\000\012\055\202\056\032" +
    "\057\037\061\055\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\053\200\055\061\056\032\057\037\061\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\052" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\050\014\152\030\123\031" +
    "\125\034\124\035\054\036\047\037\057\040\040\041\045" +
    "\043\026\045\060\047\024\051\035\053\031\054\153\055" +
    "\126\056\032\057\037\061\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\042\104\001\001\000\012\055" +
    "\151\056\032\057\037\061\055\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\055\122\056\032\057\037\061" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\047\065\051\035\053\031\055\061\056" +
    "\032\057\037\061\055\001\001\000\002\001\001\000\004" +
    "\050\066\001\001\000\016\051\071\053\031\055\061\056" +
    "\032\057\037\061\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\052\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\053\076\055\061\056\032\057\037" +
    "\061\055\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\040\100\041\045\043\026\045\060\047\024\051\035" +
    "\053\031\055\061\056\032\057\037\061\055\001\001\000" +
    "\002\001\001\000\026\041\102\043\026\045\060\047\024" +
    "\051\035\053\031\055\061\056\032\057\037\061\055\001" +
    "\001\000\004\042\104\001\001\000\002\001\001\000\024" +
    "\043\106\045\060\047\024\051\035\053\031\055\061\056" +
    "\032\057\037\061\055\001\001\000\002\001\001\000\004" +
    "\044\113\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\045\114\047\024" +
    "\051\035\053\031\055\061\056\032\057\037\061\055\001" +
    "\001\000\004\046\063\001\001\000\034\036\116\037\057" +
    "\040\040\041\045\043\026\045\060\047\024\051\035\053" +
    "\031\055\061\056\032\057\037\061\055\001\001\000\002" +
    "\001\001\000\032\037\120\040\040\041\045\043\026\045" +
    "\060\047\024\051\035\053\031\055\061\056\032\057\037" +
    "\061\055\001\001\000\002\001\001\000\044\030\123\031" +
    "\125\034\124\035\054\036\047\037\057\040\040\041\045" +
    "\043\026\045\060\047\024\051\035\053\031\055\126\056" +
    "\032\057\037\061\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\032" +
    "\133\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\042\031\143\034\124\035" +
    "\054\036\047\037\057\040\040\041\045\043\026\045\060" +
    "\047\024\051\035\053\031\055\126\056\032\057\037\061" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\036\035\145" +
    "\036\047\037\057\040\040\041\045\043\026\045\060\047" +
    "\024\051\035\053\031\055\061\056\032\057\037\061\055" +
    "\001\001\000\002\001\001\000\042\031\150\034\124\035" +
    "\054\036\047\037\057\040\040\041\045\043\026\045\060" +
    "\047\024\051\035\053\031\055\126\056\032\057\037\061" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\053" +
    "\156\055\061\056\032\057\037\061\055\001\001\000\002" +
    "\001\001\000\002\001\001\000\044\030\175\031\125\034" +
    "\124\035\054\036\047\037\057\040\040\041\045\043\026" +
    "\045\060\047\024\051\035\053\031\055\126\056\032\057" +
    "\037\061\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\031\167\034\124\035\054\036" +
    "\047\037\057\040\040\041\045\043\026\045\060\047\024" +
    "\051\035\053\031\055\126\056\032\057\037\060\170\061" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\042\031" +
    "\173\034\124\035\054\036\047\037\057\040\040\041\045" +
    "\043\026\045\060\047\024\051\035\053\031\055\126\056" +
    "\032\057\037\061\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\050\014\152" +
    "\030\123\031\125\034\124\035\054\036\047\037\057\040" +
    "\040\041\045\043\026\045\060\047\024\051\035\053\031" +
    "\054\203\055\126\056\032\057\037\061\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\006\210\014\212\016\207\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\213\020\022\001\001\000\002\001\001\000\006\014" +
    "\212\016\216\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\003\232\004\234\014\233\001" +
    "\001\000\044\012\224\031\222\034\124\035\054\036\047" +
    "\037\057\040\040\041\045\043\026\045\060\047\024\051" +
    "\035\053\031\055\126\056\032\057\037\061\055\001\001" +
    "\000\002\001\001\000\046\012\226\013\225\031\222\034" +
    "\124\035\054\036\047\037\057\040\040\041\045\043\026" +
    "\045\060\047\024\051\035\053\031\055\126\056\032\057" +
    "\037\061\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\012\231\031\222\034\124\035" +
    "\054\036\047\037\057\040\040\041\045\043\026\045\060" +
    "\047\024\051\035\053\031\055\126\056\032\057\037\061" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\010\014\011\015\017\310\020\022\001" +
    "\001\000\066\003\253\014\233\021\254\022\243\023\247" +
    "\024\241\025\250\026\245\027\235\030\252\031\125\034" +
    "\124\035\054\036\047\037\057\040\040\041\045\043\026" +
    "\045\060\047\024\051\035\053\031\055\126\056\032\057" +
    "\037\061\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\060\021\266\023\247\024\241\025\250" +
    "\026\245\027\235\030\252\031\125\034\124\035\054\036" +
    "\047\037\057\040\040\041\045\043\026\045\060\047\024" +
    "\051\035\053\031\055\126\056\032\057\037\061\055\001" +
    "\001\000\046\023\263\030\252\031\125\034\124\035\054" +
    "\036\047\037\057\040\040\041\045\043\026\045\060\047" +
    "\024\051\035\053\031\055\126\056\032\057\037\061\055" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\044\030\257\031\125\034\124\035\054\036\047\037\057" +
    "\040\040\041\045\043\026\045\060\047\024\051\035\053" +
    "\031\055\126\056\032\057\037\061\055\001\001\000\002" +
    "\001\001\000\060\021\261\023\247\024\241\025\250\026" +
    "\245\027\235\030\252\031\125\034\124\035\054\036\047" +
    "\037\057\040\040\041\045\043\026\045\060\047\024\051" +
    "\035\053\031\055\126\056\032\057\037\061\055\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\044" +
    "\030\270\031\125\034\124\035\054\036\047\037\057\040" +
    "\040\041\045\043\026\045\060\047\024\051\035\053\031" +
    "\055\126\056\032\057\037\061\055\001\001\000\002\001" +
    "\001\000\060\021\272\023\247\024\241\025\250\026\245" +
    "\027\235\030\252\031\125\034\124\035\054\036\047\037" +
    "\057\040\040\041\045\043\026\045\060\047\024\051\035" +
    "\053\031\055\126\056\032\057\037\061\055\001\001\000" +
    "\002\001\001\000\060\021\274\023\247\024\241\025\250" +
    "\026\245\027\235\030\252\031\125\034\124\035\054\036" +
    "\047\037\057\040\040\041\045\043\026\045\060\047\024" +
    "\051\035\053\031\055\126\056\032\057\037\061\055\001" +
    "\001\000\002\001\001\000\046\023\276\030\252\031\125" +
    "\034\124\035\054\036\047\037\057\040\040\041\045\043" +
    "\026\045\060\047\024\051\035\053\031\055\126\056\032" +
    "\057\037\061\055\001\001\000\002\001\001\000\046\023" +
    "\300\030\252\031\125\034\124\035\054\036\047\037\057" +
    "\040\040\041\045\043\026\045\060\047\024\051\035\053" +
    "\031\055\126\056\032\057\037\061\055\001\001\000\002" +
    "\001\001\000\044\030\302\031\125\034\124\035\054\036" +
    "\047\037\057\040\040\041\045\043\026\045\060\047\024" +
    "\051\035\053\031\055\126\056\032\057\037\061\055\001" +
    "\001\000\002\001\001\000\060\021\304\023\247\024\241" +
    "\025\250\026\245\027\235\030\252\031\125\034\124\035" +
    "\054\036\047\037\057\040\040\041\045\043\026\045\060" +
    "\047\024\051\035\053\031\055\126\056\032\057\037\061" +
    "\055\001\001\000\002\001\001\000\060\021\306\023\247" +
    "\024\241\025\250\026\245\027\235\030\252\031\125\034" +
    "\124\035\054\036\047\037\057\040\040\041\045\043\026" +
    "\045\060\047\024\051\035\053\031\055\126\056\032\057" +
    "\037\061\055\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\011\313\017\310\020\022\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\014\322\015\321\001\001\000\004\014\330\001\001" +
    "\000\010\007\323\017\324\020\022\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\327\020\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\332\017" +
    "\324\020\022\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\322\015\335\001\001\000" +
    "\004\014\330\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\014\322\015\341\001\001\000\004\014\330\001" +
    "\001\000\002\001\001\000\006\014\322\015\344\001\001" +
    "\000\004\014\330\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void report_error(String message, Object info) {
		StringBuffer m = new StringBuffer("\tParsing error");
		if (info instanceof java_cup.runtime.Symbol) {
			java_cup.runtime.Symbol s = (java_cup.runtime.Symbol) info;

			if (s.left >= 0) {
				m.append(" in line " + (s.left +1 ));
				if (s.right >= 0) {
					m.append(", column " + (s.right + 1));
				}
			}
		}
		m.append(" : " + message);
		System.err.println(m);
	}

	public parser(InputStream inp) {
		this(new Yylex(inp));
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	void dealWithType(Decl d, Type t){
		if (d.type == null) d.type = t;
		else d.type.dig(t);
	}

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // primaryExpr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // primaryExpr ::= STRING_LITERAL 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringConst(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // primaryExpr ::= CHAR_LITERAL 
            {
              Expr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char c = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CharConst(c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // primaryExpr ::= INTEGER 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IntConst(i.intValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // primaryExpr ::= IDENTIFIER 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Identifier(new Symbol(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("primaryExpr",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // arguments ::= arguments COMMA assignmentExpr 
            {
              ExprList RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprList l = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.add(e); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",46, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // arguments ::= assignmentExpr 
            {
              ExprList RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (new ExprList()).add(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("arguments",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // postfixExpr ::= postfixExpr DEC 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SelfDecrement(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // postfixExpr ::= postfixExpr INC 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SelfIncrement(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // postfixExpr ::= postfixExpr PTR IDENTIFIER 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PointerAccess(e, new Symbol(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // postfixExpr ::= postfixExpr DOT IDENTIFIER 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new RecordAccess(e, new Symbol(id)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // postfixExpr ::= postfixExpr LPAREN RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunctionCall(e, new ExprList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // postfixExpr ::= postfixExpr LPAREN arguments RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprList a = (ExprList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionCall(e, a); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // postfixExpr ::= postfixExpr LBRACE expr RBRACE 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ArrayAccess(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // postfixExpr ::= primaryExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("postfixExpr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // unaryOp ::= EXCLAM 
            {
              UnaryOp RESULT =null;
		 RESULT = UnaryOp.NOT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // unaryOp ::= TILDE 
            {
              UnaryOp RESULT =null;
		 RESULT = UnaryOp.TILDE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // unaryOp ::= MINUS 
            {
              UnaryOp RESULT =null;
		 RESULT = UnaryOp.MINUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // unaryOp ::= PLUS 
            {
              UnaryOp RESULT =null;
		 RESULT = UnaryOp.PLUS; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // unaryOp ::= MULTI 
            {
              UnaryOp RESULT =null;
		 RESULT = UnaryOp.ASTERISK; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // unaryOp ::= AMPERS 
            {
              UnaryOp RESULT =null;
		 RESULT = UnaryOp.AMPERSAND; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryOp",44, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // unaryExpr ::= SIZEOF LPAREN typeName RPAREN 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new SizeofExpr(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // unaryExpr ::= SIZEOF unaryExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryOp.SIZEOF, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // unaryExpr ::= unaryOp castExpr 
            {
              Expr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		UnaryOp op = (UnaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpr(op, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // unaryExpr ::= DEC unaryExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryOp.DEC, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // unaryExpr ::= INC unaryExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryExpr(UnaryOp.INC, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // unaryExpr ::= postfixExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("unaryExpr",43, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // typeName ::= typeName MULTI 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PointerType(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeName",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // typeName ::= typeSpecf 
            {
              Type RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = t; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeName",42, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // castExpr ::= LPAREN typeName RPAREN castExpr 
            {
              Expr RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new CastExpr(t, e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castExpr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // castExpr ::= unaryExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("castExpr",41, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // multiOp ::= MOD 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.MOD; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiOp",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // multiOp ::= DIV 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.DIV; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiOp",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // multiOp ::= MULTI 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.MUL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiOp",40, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // multiExpr ::= multiExpr multiOp castExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinaryOp op = (BinaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, op, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiExpr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // multiExpr ::= castExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("multiExpr",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // addOp ::= MINUS 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.SUB; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addOp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // addOp ::= PLUS 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.ADD; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addOp",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // addExpr ::= addExpr addOp multiExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinaryOp op = (BinaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, op, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addExpr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // addExpr ::= multiExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("addExpr",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // shiftOp ::= SHL 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.SHL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shiftOp",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // shiftOp ::= SHR 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.SHR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shiftOp",36, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // shiftExpr ::= shiftExpr shiftOp addExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinaryOp op = (BinaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, op, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shiftExpr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // shiftExpr ::= addExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("shiftExpr",35, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // relationalOp ::= GE 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.GE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // relationalOp ::= LE 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.LE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // relationalOp ::= GT 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.GT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // relationalOp ::= LT 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.LT; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalOp",34, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // relationalExpr ::= relationalExpr relationalOp shiftExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinaryOp op = (BinaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, op, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalExpr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // relationalExpr ::= shiftExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("relationalExpr",33, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // equalityOp ::= NE 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.NE; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equalityOp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // equalityOp ::= EQ 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.EQ; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equalityOp",32, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // equalityExpr ::= equalityExpr equalityOp relationalExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinaryOp op = (BinaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, op, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equalityExpr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // equalityExpr ::= relationalExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("equalityExpr",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // andExpr ::= andExpr AMPERS equalityExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryOp.LOGICAL_AND, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andExpr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // andExpr ::= equalityExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("andExpr",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // exclusiveOrExpr ::= exclusiveOrExpr CARET andExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryOp.XOR, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exclusiveOrExpr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // exclusiveOrExpr ::= andExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exclusiveOrExpr",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // inclusiveOrExpr ::= inclusiveOrExpr VBAR exclusiveOrExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryOp.LOGICAL_OR, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inclusiveOrExpr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // inclusiveOrExpr ::= exclusiveOrExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("inclusiveOrExpr",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // logicalAndExpr ::= logicalAndExpr AND inclusiveOrExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryOp.AND, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalAndExpr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // logicalAndExpr ::= inclusiveOrExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalAndExpr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // logicalOrExpr ::= logicalOrExpr OR logicalAndExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryOp.OR, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOrExpr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // logicalOrExpr ::= logicalAndExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logicalOrExpr",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // constantExpr ::= logicalOrExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("constantExpr",25, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignmentOp ::= OR_ASSIGN 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.ASSIGN_OR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignmentOp ::= XOR_ASSIGN 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.ASSIGN_XOR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // assignmentOp ::= AND_ASSIGN 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.ASSIGN_AND; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // assignmentOp ::= SHR_ASSIGN 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.ASSIGN_SHR; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // assignmentOp ::= SHL_ASSIGN 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.ASSIGN_SHL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // assignmentOp ::= SUB_ASSIGN 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.ASSIGN_SUB; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // assignmentOp ::= PLUS_ASSIGN 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.ASSIGN_ADD; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // assignmentOp ::= MOD_ASSIGN 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.ASSIGN_MOD; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // assignmentOp ::= DIV_ASSIGN 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.ASSIGN_DIV; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // assignmentOp ::= MUL_ASSIGN 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.ASSIGN_MUL; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // assignmentOp ::= ASSIGN 
            {
              BinaryOp RESULT =null;
		 RESULT = BinaryOp.ASSIGN; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentOp",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // assignmentExpr ::= unaryExpr assignmentOp assignmentExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BinaryOp op = (BinaryOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, op, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentExpr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // assignmentExpr ::= logicalOrExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignmentExpr",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= expr COMMA assignmentExpr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryExpr(e1, BinaryOp.COMMA, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= assignmentExpr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",22, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // jumpStmt ::= RETURN exprStmt SEMICOLON 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new ReturnStmt(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jumpStmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // jumpStmt ::= BREAK SEMICOLON 
            {
              Stmt RESULT =null;
		 RESULT = new BreakStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jumpStmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // jumpStmt ::= CONTINUE SEMICOLON 
            {
              Stmt RESULT =null;
		 RESULT = new ContinueStmt(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("jumpStmt",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // iterationStmt ::= FOR LPAREN exprStmt SEMICOLON exprStmt SEMICOLON RPAREN stmt 
            {
              Stmt RESULT =null;
		int es1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Expr es1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int es2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int es2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Expr es2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForLoop(es1, es2, new EmptyExpr(), s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterationStmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // iterationStmt ::= FOR LPAREN exprStmt SEMICOLON exprStmt SEMICOLON expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int es1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int es1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Expr es1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int es2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int es2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr es2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new ForLoop(es1, es2, e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterationStmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // iterationStmt ::= WHILE LPAREN expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new WhileLoop(e, s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterationStmt",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // selectionStmt ::= IF LPAREN expr RPAREN stmt ELSE stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Stmt s1 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s2 = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStmt(e, s1, s2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectionStmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // selectionStmt ::= IF LPAREN expr RPAREN stmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfStmt(e, s, new EmptyExpr()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("selectionStmt",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // compoundStmt ::= LBRACKET decls stmts RBRACKET 
            {
              CompoundStmt RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclList ds = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new CompoundStmt(ds, ss); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("compoundStmt",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // exprStmt ::= SEMICOLON 
            {
              Expr RESULT =null;
		 RESULT = new EmptyExpr(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // exprStmt ::= expr SEMICOLON 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("exprStmt",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // stmts ::= stmts stmt 
            {
              StmtList RESULT =null;
		int ssleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ssright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StmtList ss = (StmtList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ss.add(s); RESULT = ss; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // stmts ::= stmt 
            {
              StmtList RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (new StmtList()).add(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmts",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // stmt ::= jumpStmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // stmt ::= iterationStmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // stmt ::= selectionStmt 
            {
              Stmt RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stmt s = (Stmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // stmt ::= compoundStmt 
            {
              Stmt RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundStmt c = (CompoundStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = c; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= exprStmt 
            {
              Stmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // tmpDeclr ::= tmpDeclr RBRACE constantExpr RBRACE 
            {
              Decl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Decl t = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new VarDecl(new ArrayType(t.type, e), t.name, new InitList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tmpDeclr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // tmpDeclr ::= IDENTIFIER LPAREN RPAREN 
            {
              Decl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new FunctionDecl(null, new Symbol(id), new DeclList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tmpDeclr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // tmpDeclr ::= IDENTIFIER LPAREN prmtrs RPAREN 
            {
              Decl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paraleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pararight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList para = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new FunctionDecl(null, new Symbol(id), para); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tmpDeclr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // tmpDeclr ::= IDENTIFIER 
            {
              Decl RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new VarDecl(null, new Symbol(id), new InitList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("tmpDeclr",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // declr ::= MULTI declr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.type = new PointerType(d.type); RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declr ::= tmpDeclr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // plnDecl ::= typeSpecf declr 
            {
              DeclList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dealWithType(d, t); RESULT = new DeclList(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("plnDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // record ::= record typeSpecf declrs SEMICOLON 
            {
              DeclList RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		DeclList r = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList ds = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 for (Decl d : ds.decls) dealWithType(d, t); r.add(ds); RESULT = r; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // record ::= typeSpecf declrs SEMICOLON 
            {
              DeclList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList ds = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 for (Decl d : ds.decls) dealWithType(d, t); RESULT = ds;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("record",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // typeSpecf ::= UNION IDENTIFIER LBRACKET record RBRACKET 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList r = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnionType(new Symbol(id), r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // typeSpecf ::= STRUCT IDENTIFIER LBRACKET record RBRACKET 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList r = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StructType(new Symbol(id), r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // typeSpecf ::= UNION LBRACKET record RBRACKET 
            {
              Type RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList r = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new UnionType(new Symbol(""), r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // typeSpecf ::= STRUCT LBRACKET record RBRACKET 
            {
              Type RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList r = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new StructType(new Symbol(""), r); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // typeSpecf ::= UNION IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnionType(new Symbol(id), new DeclList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // typeSpecf ::= STRUCT IDENTIFIER 
            {
              Type RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StructType(new Symbol(id), new DeclList()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // typeSpecf ::= INT 
            {
              Type RESULT =null;
		 RESULT = new IntType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // typeSpecf ::= CHAR 
            {
              Type RESULT =null;
		 RESULT = new CharType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // typeSpecf ::= VOID 
            {
              Type RESULT =null;
		 RESULT = new VoidType(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("typeSpecf",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // initList ::= initList COMMA initializer 
            {
              InitList RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		InitList is = (InitList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Initializer i = (Initializer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 is.add(i); RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // initList ::= initializer 
            {
              InitList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Initializer i = (Initializer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (new InitList()).add(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // initializer ::= LBRACKET initList RBRACKET 
            {
              Initializer RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		InitList is = (InitList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new InitList(is); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initializer",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // initializer ::= assignmentExpr 
            {
              Initializer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new InitValue(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initializer",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // initDeclr ::= declr 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initDeclr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // initDeclr ::= declr ASSIGN initializer 
            {
              Decl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Initializer init = (Initializer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 d.init = init; RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initDeclr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // initDeclrs ::= initDeclrs COMMA initDeclr 
            {
              DeclList RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclList is = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl i = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 is.add(i); RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initDeclrs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // initDeclrs ::= initDeclr 
            {
              DeclList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl i = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclList(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("initDeclrs",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declrs ::= declrs COMMA declr 
            {
              DeclList RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclList ds = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ds.add(d); RESULT = ds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declrs",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declrs ::= declr 
            {
              DeclList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclList(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("declrs",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // prmtrs ::= prmtrs COMMA plnDecl 
            {
              DeclList RESULT =null;
		int psleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int psright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		DeclList ps = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclList pl = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ps.add(pl); RESULT = ps; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prmtrs",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // prmtrs ::= plnDecl 
            {
              DeclList RESULT =null;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclList pl = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new DeclList(pl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prmtrs",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // functionDef ::= typeSpecf declr compoundStmt 
            {
              FunctionDef RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Decl d = (Decl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CompoundStmt c = (CompoundStmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 dealWithType(d,t); RESULT = new FunctionDef(d.type, d.name, ((FunctionDecl) d).prmtrs, c); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionDef",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decls ::= decls decl 
            {
              DeclList RESULT =null;
		int dsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList ds = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclList d = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 ds.add(d); RESULT = ds; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decls ::= decl 
            {
              DeclList RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclList d = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (new DeclList()).add(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decls",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= typeSpecf SEMICOLON 
            {
              DeclList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
 	   	 	DeclList tmp = new DeclList();
 	   	 	tmp.add(new TypeDecl(t));
 	   	 	RESULT = tmp;
 	   	 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl ::= typeSpecf initDeclrs SEMICOLON 
            {
              DeclList RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int initleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int initright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DeclList init = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		 	for (Decl i : init.decls) dealWithType(i, t);
		 	RESULT = init;
		 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // program ::= functionDef 
            {
              AST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDef d = (FunctionDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // program ::= decl 
            {
              AST RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclList d = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new AST(d); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // program ::= program functionDef 
            {
              AST RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST p = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionDef d = (FunctionDef)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 p.decls.add(d); RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST start_val = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= program decl 
            {
              AST RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AST p = (AST)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		DeclList d = (DeclList)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 p.decls.add(d.decls); RESULT = p; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

